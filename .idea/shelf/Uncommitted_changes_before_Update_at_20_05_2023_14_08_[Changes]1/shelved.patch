Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxTestPasajeroNoUsar.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxTestPasajeroNoUsar.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxTestPasajeroNoUsar.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxTestPasajeroNoUsar.java	
+++ /dev/null	
@@ -1,74 +0,0 @@
-package sistema;
-
-import interfaz.Nacionalidad;
-import org.junit.jupiter.api.Assertions;
-
-import java.util.Locale;
-
-public class AuxTestPasajeroNoUsar {
-    private final Nacionalidad nacionalidad;
-    private final int numeroId;
-
-    private final String nombre;
-    private final int edad;
-
-    private final int profundidadEsperada;
-
-    public AuxTestPasajeroNoUsar(Nacionalidad nacionalidad, int numeroId, String nombre, int edad) {
-        this.nacionalidad = nacionalidad;
-        this.numeroId = numeroId;
-        this.nombre = nombre;
-        this.edad = edad;
-        this.profundidadEsperada = -1;
-    }
-
-    public AuxTestPasajeroNoUsar(Nacionalidad nacionalidad, int numeroId, String nombre, int edad, int profundidadEsperada) {
-        this.nacionalidad = nacionalidad;
-        this.numeroId = numeroId;
-        this.nombre = nombre;
-        this.edad = edad;
-        this.profundidadEsperada = profundidadEsperada;
-    }
-
-    public Nacionalidad getNacionalidad() {
-        return nacionalidad;
-    }
-
-    public int getNumeroId() {
-        return numeroId;
-    }
-
-    public String getNombre() {
-        return new String(nombre);
-    }
-
-    public int getEdad() {
-        return edad;
-    }
-
-    public int getProfundidadEsperada() {
-        return profundidadEsperada;
-    }
-
-    public String getIdentificador() {
-        return getIdentificador(nacionalidad, numeroId);
-    }
-
-    public static String getIdentificador(Nacionalidad nacionalidad, int numeroId) {
-
-        return String.format(Locale.GERMAN, "%s%,d#%d", nacionalidad.getCodigo(), numeroId / 10, numeroId % 10);
-    }
-
-    public static String getIdentificadorValido(Nacionalidad nacionalidad, int numeroId) {
-        Assertions.assertTrue(numeroId >= 100_000_0 && numeroId <= 9_999_999_9);
-        return String.format(Locale.GERMAN, "%s%,d#%d", nacionalidad.getCodigo(), numeroId / 10, numeroId % 10);
-    }
-
-    public static AuxTestPasajeroNoUsar pasajero(Nacionalidad nacionalidad, int numeroId, String nombre, int edad, int profundidadEsperada) {
-        return new AuxTestPasajeroNoUsar(nacionalidad, numeroId, nombre, edad, profundidadEsperada);
-    }
-
-    public String toString() {
-        return String.format("%s;%s;%s;%s", getIdentificador(), getNombre(), getEdad(), getNacionalidad().getCodigo());
-    }
-}
Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxAsserciones.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxAsserciones.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxAsserciones.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxAsserciones.java	
+++ /dev/null	
@@ -1,37 +0,0 @@
-package sistema;
-
-import org.junit.jupiter.api.Assertions;
-import interfaz.*;
-
-public class AuxAsserciones {
-    public static Retorno checkearOk(Retorno retorno, String mensajeError) {
-        Assertions.assertEquals(Retorno.Resultado.OK, retorno.getResultado(), mensajeError);
-        return retorno;
-    }
-
-    public static Retorno checkearOk(Retorno retorno, String texto, String mensajeError) {
-        Assertions.assertEquals(Retorno.Resultado.OK, retorno.getResultado(), mensajeError);
-        Assertions.assertEquals(texto, retorno.getValorString(), mensajeError);
-
-        return retorno;
-    }
-
-    public static Retorno checkearOk(Retorno retorno, int valor, String texto, String mensajeError) {
-        Assertions.assertEquals(Retorno.Resultado.OK, retorno.getResultado(), mensajeError);
-        Assertions.assertEquals(texto, retorno.getValorString(), mensajeError);
-        Assertions.assertEquals(valor, retorno.getValorInteger(), mensajeError);
-
-        return retorno;
-    }
-
-    public static Retorno checkearError(Retorno.Resultado resultado, Retorno retorno, String textoAImprimir) {
-        Assertions.assertEquals(resultado, retorno.getResultado(), textoAImprimir);
-        return retorno;
-
-    }
-
-    public static Retorno checkearError(Retorno.Resultado resultado, Retorno retorno) {
-        Assertions.assertEquals(resultado, retorno.getResultado());
-        return retorno;
-    }
-}
Index: obligatorio-ae2-mar23-tests-v2/.idea/codeStyles/Project.xml
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/.idea/codeStyles/Project.xml b/obligatorio-ae2-mar23-tests-v2/.idea/codeStyles/Project.xml
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/.idea/codeStyles/Project.xml	
+++ /dev/null	
@@ -1,7 +0,0 @@
-<component name="ProjectCodeStyleConfiguration">
-  <code_scheme name="Project" version="173">
-    <ScalaCodeStyleSettings>
-      <option name="MULTILINE_STRING_CLOSING_QUOTES_ON_NEW_LINE" value="true" />
-    </ScalaCodeStyleSettings>
-  </code_scheme>
-</component>
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Nacionalidad.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Nacionalidad.java b/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Nacionalidad.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Nacionalidad.java	
+++ /dev/null	
@@ -1,36 +0,0 @@
-package interfaz;
-
-import java.util.Arrays;
-import java.util.Objects;
-
-public enum Nacionalidad {
-
-    Francia(0, "FR"),
-    Alemania(1, "DE"),
-    ReinoUnido(2, "UK"),
-    Espania(3, "ES"),
-    Otro(4, "OT");
-
-    private final int indice;
-    private final String codigo;
-
-    Nacionalidad(int indice, String codigo) {
-        this.indice = indice;
-        this.codigo = codigo;
-    }
-
-    public int getIndice() {
-        return indice;
-    }
-
-    public String getCodigo() {
-        return codigo;
-    }
-
-    public static Nacionalidad fromCodigo(String codigo) {
-        return Arrays.stream(Nacionalidad.values())
-                .filter(a -> Objects.equals(a.codigo, codigo))
-                .findFirst()
-                .orElse(null);
-    }
-}
Index: obligatorio-ae2-mar23-tests-v2/src/test/test.iml
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/test.iml b/obligatorio-ae2-mar23-tests-v2/src/test/test.iml
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/test.iml	
+++ /dev/null	
@@ -1,13 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/java" isTestSource="true" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" name="lib" level="project" />
-    <orderEntry type="module" module-name="main" />
-  </component>
-</module>
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/src/main/main.iml
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/main/main.iml b/obligatorio-ae2-mar23-tests-v2/src/main/main.iml
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/main/main.iml	
+++ /dev/null	
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/java" isTestSource="false" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestCaminosMinimosDistancia.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestCaminosMinimosDistancia.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestCaminosMinimosDistancia.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestCaminosMinimosDistancia.java	
+++ /dev/null	
@@ -1,350 +0,0 @@
-package sistema;
-
-import interfaz.EstadoCamino;
-import interfaz.Retorno;
-import interfaz.Sistema;
-import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.Test;
-
-import java.util.Arrays;
-import java.util.Objects;
-import java.util.Random;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-import static interfaz.EstadoCamino.*;
-import static interfaz.Retorno.Resultado.*;
-import static sistema.AuxAccionesEstaciones.*;
-import static sistema.AuxAsserciones.checkearError;
-import static sistema.AuxAsserciones.checkearOk;
-import static sistema.AuxTestClaseEstacionNoUsar.estacion;
-
-/**********************************************************
- ************************ ERRORES COMUNES *****************
- * Cosas que pueden estarles pasando y que haga que los tests no funcionen
- * Usar '==' en vez de equals
- * No modelarlos como un multigrafo dirigido, no es lo mismo aristas[a][b] que aristas[b][a]
- * Usar attributos de clase para las agregaciones, que funcionen los test no quita que esto este mal. Lo mejor es usar attributos o objetos creados para esa llamada como por ejemplo un StringBuilder.
- * Mal manejo de los pipes, es mas facil hacer un prepend del pipe (agregarlo al principio) que un append la mayoría de las veces.
- * No darse cuenta que hay lugares donde no podemos explorar en el dijkstra debido a que el grafo no es conexo.
- * Lo anterior puede generar errores de overflow (INTEGER.MAX_VALUE+1 es negativo, porque?)
- * No usar doubles en las distancias
- * Que el máximo de vertices sea 100, no quiere decir que haya 100 vertices
- **********************************************************/
-public class TestCaminosMinimosDistancia {
-    private static final String MADRID_1 = "MAD001";
-    private static final String MADRID_2 = "MAD002";
-    private static final String PARIS_1 = "PAR001";
-    private static final String PARIS_2 = "PAR002";
-    private static final String MONTREAL = "MON001";
-    private static final String LYON = "LYO001";
-    private static final String LISBOA = "LIS001";
-    private static final String LONDRES = "LON001";
-
-
-    private static final AuxTestClaseEstacionNoUsar EST_MADRID_1 = estacion(MADRID_1, "MADRID_1");
-    private static final AuxTestClaseEstacionNoUsar EST_MADRID_2 = estacion(MADRID_2, "MADRID_2");
-    private static final AuxTestClaseEstacionNoUsar EST_PARIS_1 = estacion(PARIS_1, "PARIS_1 ");
-    private static final AuxTestClaseEstacionNoUsar EST_PARIS_2 = estacion(PARIS_2, "PARIS_2 ");
-    private static final AuxTestClaseEstacionNoUsar EST_MONTREAL = estacion(MONTREAL, "MONTREAL");
-    private static final AuxTestClaseEstacionNoUsar EST_LYON = estacion(LYON, "LYON ");
-    private static final AuxTestClaseEstacionNoUsar EST_LISBOA = estacion(LISBOA, "LISBOA");
-    private static final AuxTestClaseEstacionNoUsar EST_LONDRES = estacion(LONDRES, "LONDRES ");
-
-    private static final AuxTestConexionNoUsar MADRID_1_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_MADRID_1, 1, 50, 2, 10, EXCELENTE);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_MADRID_2, 2, 25, 1, 5, MALO);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_PARIS_1, 3, 625, 25, 120, MALO);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_PARIS_2, 4, 0, 0, 0, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LISBOA, 5, 650, 26, 145, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LONDRES, 6, 375, 15, 150, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_LYON = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LYON, 7, 1250, 50, 175, MALO);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_MONTREAL, 8, 650, 26, 175, MALO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_MADRID_1, 9, 25, 1, 10, MALO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_MADRID_2, 10, 750, 30, 175, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_PARIS_1, 11, 350, 14, 80, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_PARIS_2, 12, 600, 24, 175, MALO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_LISBOA, 13, 550, 22, 75, EXCELENTE);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_LONDRES, 14, 225, 9, 80, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_LYON = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_LYON, 15, 75, 3, 20, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_MONTREAL, 16, 200, 8, 60, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_MADRID_1, 17, 650, 26, 95, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_MADRID_2, 18, 625, 25, 170, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_PARIS_1, 19, 900, 36, 190, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_PARIS_2, 20, 525, 21, 75, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_LISBOA, 21, 1325, 53, 185, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_LONDRES, 22, 300, 12, 45, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_LYON = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_LYON, 23, 50, 34, 185, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_MONTREAL, 24, 0, 0, 5, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_MADRID_1, 25, 775, 31, 135, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_MADRID_2, 26, 325, 13, 130, MALO);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_PARIS_1, 27, 200, 8, 80, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_PARIS_2, 28, 975, 39, 165, MALO);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_LISBOA, 29, 1025, 41, 140, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_LONDRES, 30, 150, 6, 25, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_LYON = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_LYON, 31, 200, 8, 60, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_MONTREAL, 32, 75, 3, 30, EXCELENTE);
-    private static final AuxTestConexionNoUsar LISBOA_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_MADRID_1, 33, 425, 17, 105, BUENO);
-    private static final AuxTestConexionNoUsar LISBOA_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_MADRID_2, 34, 700, 28, 115, MALO);
-    private static final AuxTestConexionNoUsar LISBOA_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_PARIS_1, 35, 225, 9, 80, MALO);
-    private static final AuxTestConexionNoUsar LISBOA_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_PARIS_2, 36, 275, 11, 65, BUENO);
-    private static final AuxTestConexionNoUsar LISBOA_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_LISBOA, 37, 125, 5, 30, MALO);
-    private static final AuxTestConexionNoUsar LISBOA_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_LONDRES, 38, 675, 27, 115, EXCELENTE);
-    private static final AuxTestConexionNoUsar LISBOA_TO_LYON = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_LYON, 39, 100, 4, 20, MALO);
-    private static final AuxTestConexionNoUsar LISBOA_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_MONTREAL, 40, 475, 19, 110, EXCELENTE);
-    private static final AuxTestConexionNoUsar LONDRES_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_MADRID_1, 41, 350, 14, 65, EXCELENTE);
-    private static final AuxTestConexionNoUsar LONDRES_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_MADRID_2, 42, 225, 9, 60, MALO);
-    private static final AuxTestConexionNoUsar LONDRES_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_PARIS_1, 43, 75, 3, 20, BUENO);
-    private static final AuxTestConexionNoUsar LONDRES_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_PARIS_2, 44, 1000, 40, 150, BUENO);
-    private static final AuxTestConexionNoUsar LONDRES_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_LISBOA, 45, 200, 8, 85, BUENO);
-    private static final AuxTestConexionNoUsar LONDRES_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_LONDRES, 46, 525, 21, 100, EXCELENTE);
-    private static final AuxTestConexionNoUsar LONDRES_TO_LYON = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_LYON, 47, 100, 4, 40, EXCELENTE);
-    private static final AuxTestConexionNoUsar LONDRES_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_MONTREAL, 48, 1175, 47, 185, MALO);
-    private static final AuxTestConexionNoUsar LYON_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_LYON, EST_MADRID_1, 49, 575, 23, 120, MALO);
-    private static final AuxTestConexionNoUsar LYON_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_LYON, EST_MADRID_2, 50, 100, 4, 30, BUENO);
-    private static final AuxTestConexionNoUsar LYON_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_LYON, EST_PARIS_1, 51, 200, 8, 35, MALO);
-    private static final AuxTestConexionNoUsar LYON_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_LYON, EST_PARIS_2, 52, 475, 19, 165, BUENO);
-    private static final AuxTestConexionNoUsar LYON_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_LYON, EST_LISBOA, 53, 550, 22, 160, MALO);
-    private static final AuxTestConexionNoUsar LYON_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_LYON, EST_LONDRES, 54, 350, 14, 75, EXCELENTE);
-    private static final AuxTestConexionNoUsar LYON_TO_LYON = AuxTestConexionNoUsar.conexion(EST_LYON, EST_LYON, 55, 1075, 43, 150, BUENO);
-    private static final AuxTestConexionNoUsar LYON_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_LYON, EST_MONTREAL, 56, 800, 32, 125, BUENO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_MADRID_1, 57, 125, 5, 40, MALO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_MADRID_2, 58, 150, 6, 40, MALO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_PARIS_1, 59, 225, 9, 65, MALO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_PARIS_2, 60, 50, 2, 10, EXCELENTE);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_LISBOA, 61, 575, 23, 115, BUENO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_LONDRES, 62, 200, 8, 30, MALO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_LYON = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_LYON, 63, 175, 7, 50, BUENO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_MONTREAL, 64, 125, 5, 20, MALO);
-
-    private Sistema tengoUnSistemaValido() {
-        Sistema sis = new ImplementacionSistema();
-        sis.inicializarSistema(20);
-        return sis;
-    }
-
-    public static void main(String[] args) {
-        String[] estaciones = new String[]{"MADRID_1", "MADRID_2", "PARIS_1", "PARIS_2", "LISBOA", "LONDRES", "LYON", "MONTREAL"};
-
-        int id = 1;
-        final double F_TIEMPO = 1 / 5.;
-        Random r = new Random();
-        for (int i = 0; i < estaciones.length; i++) {
-            for (int j = 0; j < estaciones.length; j++) {
-                int distancia = r.nextInt(40) * 5;
-
-                int tiempo = (int) ((0.5 + r.nextDouble()) * F_TIEMPO * distancia);
-                int costo = (int) tiempo * 25;
-
-                System.out.printf("private static final AuxTestConexionNoUsar %s_TO_%s=AuxTestConexionNoUsar.conexion(EST_%s,EST_%s,%d,%d,%d,%d,%s);\n",
-                        estaciones[i], estaciones[j], estaciones[i], estaciones[j], id++, costo, tiempo, distancia,
-                        EstadoCamino.values()[r.nextInt(3)]);
-            }
-        }
-    }
-
-
-    @Test
-    public void testCaminosMinimosDistancia1() {
-
-        Sistema sistema = tengoUnSistemaValido();
-        //Para ver el grafo esperado pueden entrar a
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2220km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22150km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_1%5Blabel%3D%2210km%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%225km%20%7BMALO%7D%20%22%5D%3B%0AV_3-%3EV_2%5Blabel%3D%22170km%20%7BEXCELENTE%7D%20%22%5D%3B%0A%7D%0A
-        //layout recomendado circo
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        registrarConexionesOk(sistema,
-                MADRID_1_TO_MADRID_2,
-                MADRID_1_TO_MADRID_1,
-                MADRID_1_TO_LONDRES,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_MADRID_2
-        );
-
-        verificarCaminoDistanciaMinimoOk(sistema, EST_MADRID_1, EST_PARIS_1,
-                MADRID_1_TO_LONDRES, LONDRES_TO_PARIS_1);
-        //El camino madrid 1 a madrid 2 esta en estado malo
-        verificarCaminoDistanciaMinimoOk(sistema, EST_MADRID_1, EST_MADRID_2,
-                MADRID_1_TO_LONDRES, LONDRES_TO_PARIS_1, PARIS_1_TO_MADRID_2);
-        //Lo actualizamos y en teoria el grafo queda así por lo que podemos irnos derecho.
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2220km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22150km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_1%5Blabel%3D%2210km%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%225km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_2%5Blabel%3D%22170km%20%7BEXCELENTE%7D%20%22%5D%3B%0A%7D%0A
-        checkearOk(sistema.actualizarCamino(MADRID_1, MADRID_2, MADRID_1_TO_MADRID_2.getId(), 25, 100, 5, BUENO), "El camino se deberia actualizar bien");
-        verificarCaminoDistanciaMinimoOk(sistema, EST_MADRID_1, EST_MADRID_2,
-                MADRID_1_TO_MADRID_2);
-        //tocamos el costo de la ruta mad1 to mad2 para forzar a ir por la ruta larga
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2220km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22150km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_1%5Blabel%3D%2210km%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%22342km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_2%5Blabel%3D%22170km%20%7BEXCELENTE%7D%20%22%5D%3B%0A%7D%0A
-        checkearOk(sistema.actualizarCamino(MADRID_1, MADRID_2, MADRID_1_TO_MADRID_2.getId(), 300, 100, 342, BUENO), "El camino se deberia actualizar bien");
-
-        verificarCaminoDistanciaMinimoOk(sistema, EST_MADRID_1, EST_MADRID_2,
-                MADRID_1_TO_LONDRES, LONDRES_TO_PARIS_1, PARIS_1_TO_MADRID_2);
-
-    }
-
-    @Test
-    public void testCaminosMinimosDistancia2() {
-
-        Sistema sistema = tengoUnSistemaValido();
-        //Para ver el grafo inicial pueden entrar a
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_4%5Blabel%3D%22PAR002%22%5D%3B%0AV_5%5Blabel%3D%22LIS001%22%5D%3B%0AV_6%5Blabel%3D%22LYO001%22%5D%3B%0AV_7%5Blabel%3D%22MON001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2220km%20%7BBUENO%7D%20%22%5D%3B%0AV_0-%3EV_5%5Blabel%3D%2285km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22150km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%225km%20%7BMALO%7D%20%22%5D%3B%0AV_2-%3EV_3%5Blabel%3D%2280km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_4%5Blabel%3D%2275km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_6%5Blabel%3D%22185km%20%7BBUENO%7D%20%22%5D%3B%0AV_4-%3EV_7%5Blabel%3D%2230km%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_5-%3EV_1%5Blabel%3D%22105km%20%7BBUENO%7D%20%22%5D%3B%0AV_6-%3EV_7%5Blabel%3D%22125km%20%7BBUENO%7D%20%22%5D%3B%0A%7D%0A
-
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1, EST_PARIS_2, EST_LISBOA,
-                EST_LYON, EST_MONTREAL);
-        registrarConexionesOk(sistema,
-                MADRID_1_TO_LONDRES,
-                MADRID_1_TO_MADRID_2,
-                MADRID_2_TO_PARIS_1,
-                LONDRES_TO_LISBOA,
-                LISBOA_TO_MADRID_1,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_PARIS_2,
-                PARIS_1_TO_LYON,
-                LYON_TO_MONTREAL,
-                PARIS_2_TO_MONTREAL
-        );
-
-
-        verificarCaminoDistanciaMinimoOk(sistema, EST_LISBOA, EST_MONTREAL,
-                LISBOA_TO_MADRID_1,
-                MADRID_1_TO_LONDRES,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_PARIS_2,
-                PARIS_2_TO_MONTREAL);
-        //Actualizamos madrid1 to madrid 2 cambiando el camino minimo
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_4%5Blabel%3D%22PAR002%22%5D%3B%0AV_5%5Blabel%3D%22LIS001%22%5D%3B%0AV_6%5Blabel%3D%22LYO001%22%5D%3B%0AV_7%5Blabel%3D%22MON001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2220km%20%7BBUENO%7D%20%22%5D%3B%0AV_0-%3EV_5%5Blabel%3D%2285km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22150km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%225km%20%7BBUENO%7D%20%22%5D%3B%0AV_2-%3EV_3%5Blabel%3D%2280km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_4%5Blabel%3D%2275km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_6%5Blabel%3D%22185km%20%7BBUENO%7D%20%22%5D%3B%0AV_4-%3EV_7%5Blabel%3D%2230km%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_5-%3EV_1%5Blabel%3D%22105km%20%7BBUENO%7D%20%22%5D%3B%0AV_6-%3EV_7%5Blabel%3D%22125km%20%7BBUENO%7D%20%22%5D%3B%0A%7D%0A
-        actualizarConexionesOk(sistema, MADRID_1_TO_MADRID_2.withEstado(BUENO));
-
-        verificarCaminoDistanciaMinimoOk(sistema, EST_LISBOA, EST_MONTREAL,
-                LISBOA_TO_MADRID_1,
-                MADRID_1_TO_MADRID_2,
-                MADRID_2_TO_PARIS_1,
-                PARIS_1_TO_PARIS_2,
-                PARIS_2_TO_MONTREAL);
-        //registramos otra conexion mas barata entre madrid 1 y londres
-        AuxTestConexionNoUsar madridLondresMasBarata = MADRID_1_TO_LONDRES.withKm(30).withId(23232);
-        registrarConexionesOk(sistema, madridLondresMasBarata);
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_4%5Blabel%3D%22PAR002%22%5D%3B%0AV_5%5Blabel%3D%22LIS001%22%5D%3B%0AV_6%5Blabel%3D%22LYO001%22%5D%3B%0AV_7%5Blabel%3D%22MON001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2220km%20%7BBUENO%7D%20%22%5D%3B%0AV_0-%3EV_5%5Blabel%3D%2285km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22150km%20%7BBUENO%7D%20%2C30km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%225km%20%7BBUENO%7D%20%22%5D%3B%0AV_2-%3EV_3%5Blabel%3D%2280km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_4%5Blabel%3D%2275km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_6%5Blabel%3D%22185km%20%7BBUENO%7D%20%22%5D%3B%0AV_4-%3EV_7%5Blabel%3D%2230km%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_5-%3EV_1%5Blabel%3D%22105km%20%7BBUENO%7D%20%22%5D%3B%0AV_6-%3EV_7%5Blabel%3D%22125km%20%7BBUENO%7D%20%22%5D%3B%0A%7D%0A
-        verificarCaminoDistanciaMinimoOk(sistema, EST_LISBOA, EST_MONTREAL,
-                LISBOA_TO_MADRID_1,
-                madridLondresMasBarata,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_PARIS_2,
-                PARIS_2_TO_MONTREAL);
-
-        verificarCaminoDistanciaMinimoOk(sistema, EST_LISBOA, EST_LYON,
-                LISBOA_TO_MADRID_1,
-                madridLondresMasBarata,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_LYON);
-        registroEstacionOk(sistema, estacion("ROM002", "Roma"));
-        registroEstacionOk(sistema, estacion("ITA002", "Florencia"));
-        registroEstacionOk(sistema, estacion("RUS002", "Moscu"));
-        registrarConexionesOk(
-                sistema,
-                AuxTestConexionNoUsar.conexion("ROM002", "ITA002", 1, 2322, 22, 22, BUENO),
-                AuxTestConexionNoUsar.conexion("ROM002", "RUS002", 1, 2322, 22, 22, BUENO)
-        );
-        //No importa que agregemos una componente no conexa los caminos se deben mantener
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_4%5Blabel%3D%22PAR002%22%5D%3B%0AV_5%5Blabel%3D%22LIS001%22%5D%3B%0AV_6%5Blabel%3D%22LYO001%22%5D%3B%0AV_7%5Blabel%3D%22MON001%22%5D%3B%0AV_8%5Blabel%3D%22ROM002%22%5D%3B%0AV_9%5Blabel%3D%22ITA002%22%5D%3B%0AV_10%5Blabel%3D%22RUS002%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2220km%20%7BBUENO%7D%20%22%5D%3B%0AV_0-%3EV_5%5Blabel%3D%2285km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22150km%20%7BBUENO%7D%20%2C30km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%225km%20%7BBUENO%7D%20%22%5D%3B%0AV_2-%3EV_3%5Blabel%3D%2280km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_4%5Blabel%3D%2275km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_6%5Blabel%3D%22185km%20%7BBUENO%7D%20%22%5D%3B%0AV_4-%3EV_7%5Blabel%3D%2230km%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_5-%3EV_1%5Blabel%3D%22105km%20%7BBUENO%7D%20%22%5D%3B%0AV_6-%3EV_7%5Blabel%3D%22125km%20%7BBUENO%7D%20%22%5D%3B%0AV_8-%3EV_9%5Blabel%3D%2222km%20%7BBUENO%7D%20%22%5D%3B%0AV_8-%3EV_10%5Blabel%3D%2222km%20%7BBUENO%7D%20%22%5D%3B%0A%7D%0A
-
-        verificarCaminoDistanciaMinimoOk(sistema, EST_LISBOA, EST_MONTREAL,
-                LISBOA_TO_MADRID_1,
-                madridLondresMasBarata,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_PARIS_2,
-                PARIS_2_TO_MONTREAL);
-
-        verificarCaminoDistanciaMinimoOk(sistema, EST_LISBOA, EST_LYON,
-                LISBOA_TO_MADRID_1,
-                madridLondresMasBarata,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_LYON);
-
-        //Asimismo tampoco importa que agreguemos una conexión "más corta" si el estado es malo
-
-        AuxTestConexionNoUsar madridLondresMasBarataRota = MADRID_1_TO_LONDRES.withKm(1).withId(223232).withEstado(MALO);
-        registrarConexionesOk(sistema, madridLondresMasBarataRota);
-        verificarCaminoDistanciaMinimoOk(sistema, EST_LISBOA, EST_MONTREAL,
-                LISBOA_TO_MADRID_1,
-                madridLondresMasBarata,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_PARIS_2,
-                PARIS_2_TO_MONTREAL);
-    }
-
-    @Test
-    public void testCaminosMinimosDistanciaNoHayCamino() {
-
-        Sistema sistema = tengoUnSistemaValido();
-
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1, EST_PARIS_2, EST_LISBOA,
-                EST_LYON, EST_MONTREAL);
-        registrarConexionesOk(sistema,
-                MADRID_1_TO_LONDRES,
-                MADRID_2_TO_PARIS_1,
-                LONDRES_TO_LISBOA,
-                LISBOA_TO_MADRID_1,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_PARIS_2,
-                PARIS_1_TO_LYON,
-                LYON_TO_MONTREAL,
-                PARIS_2_TO_MONTREAL
-        );
-        //El grafo es :
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_4%5Blabel%3D%22PAR002%22%5D%3B%0AV_5%5Blabel%3D%22LIS001%22%5D%3B%0AV_6%5Blabel%3D%22LYO001%22%5D%3B%0AV_7%5Blabel%3D%22MON001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2220km%20%7BBUENO%7D%20%22%5D%3B%0AV_0-%3EV_5%5Blabel%3D%2285km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22150km%20%7BBUENO%7D%20%22%5D%3B%0AV_2-%3EV_3%5Blabel%3D%2280km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_4%5Blabel%3D%2275km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_6%5Blabel%3D%22185km%20%7BBUENO%7D%20%22%5D%3B%0AV_4-%3EV_7%5Blabel%3D%2230km%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_5-%3EV_1%5Blabel%3D%22105km%20%7BBUENO%7D%20%22%5D%3B%0AV_6-%3EV_7%5Blabel%3D%22125km%20%7BBUENO%7D%20%22%5D%3B%0A%7D%0A
-        checkearError(ERROR_3, sistema.viajeCostoMinimoKilometros(LISBOA, MADRID_2), "No hay camino");
-        //Agregamos la conexion en estado malo
-        registrarConexionesOk(sistema,
-                MADRID_1_TO_MADRID_2);
-        checkearError(ERROR_3, sistema.viajeCostoMinimoKilometros(LISBOA, MADRID_2), "No hay camino");
-        registroEstacionOk(sistema, estacion("ROM022", "Roma"));
-
-        checkearError(ERROR_3, sistema.viajeCostoMinimoKilometros(LISBOA, "ROM022"), "No hay camino");
-
-        //Agregamos una conexion lyon madrid 2
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_4%5Blabel%3D%22PAR002%22%5D%3B%0AV_5%5Blabel%3D%22LIS001%22%5D%3B%0AV_6%5Blabel%3D%22LYO001%22%5D%3B%0AV_7%5Blabel%3D%22MON001%22%5D%3B%0AV_8%5Blabel%3D%22ROM022%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2220km%20%7BBUENO%7D%20%22%5D%3B%0AV_0-%3EV_5%5Blabel%3D%2285km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22150km%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%225km%20%7BMALO%7D%20%22%5D%3B%0AV_2-%3EV_3%5Blabel%3D%2280km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_4%5Blabel%3D%2275km%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_6%5Blabel%3D%22185km%20%7BBUENO%7D%20%22%5D%3B%0AV_4-%3EV_7%5Blabel%3D%2230km%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_5-%3EV_1%5Blabel%3D%22105km%20%7BBUENO%7D%20%22%5D%3B%0AV_6-%3EV_2%5Blabel%3D%2230km%20%7BBUENO%7D%20%22%5D%3B%0AV_6-%3EV_7%5Blabel%3D%22125km%20%7BBUENO%7D%20%22%5D%3B%0A%7D%0A
-        registrarConexionesOk(sistema, LYON_TO_MADRID_2);
-        verificarCaminoDistanciaMinimoOk(sistema, EST_LISBOA, EST_MADRID_2,
-                LISBOA_TO_MADRID_1,
-                MADRID_1_TO_LONDRES,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_LYON,
-                LYON_TO_MADRID_2);
-    }
-
-    @Test
-    public void testCaminosDistanciaMinimosEstacionesInvalidas() {
-        Sistema sistema = tengoUnSistemaValido();
-
-        checkearError(ERROR_1, sistema.viajeCostoMinimoKilometros("", "ROM022"), "vacios/nulos");
-        checkearError(ERROR_1, sistema.viajeCostoMinimoKilometros(null, "ROM022"), "vacios/nulos");
-        checkearError(ERROR_1, sistema.viajeCostoMinimoKilometros("ROM022", null), "vacios/nulos");
-        checkearError(ERROR_1, sistema.viajeCostoMinimoKilometros("ROM022", ""), "vacios/nulos");
-
-        checkearError(ERROR_2, sistema.viajeCostoMinimoKilometros("AS@33", "ROM022"), "invalidos");
-        checkearError(ERROR_2, sistema.viajeCostoMinimoKilometros("ROM232", "ROM02222"), "invalidos");
-    }
-
-    @Test
-    public void testCaminosDistanciaMinimosEstacionesNoExistentes() {
-
-        Sistema sistema = tengoUnSistemaValido();
-
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1, EST_PARIS_2, EST_LISBOA,
-                EST_LYON, EST_MONTREAL);
-        checkearError(ERROR_5, sistema.viajeCostoMinimoKilometros(EST_LONDRES.getCodigo(), "ROM022"), "invalidos");
-        checkearError(ERROR_4, sistema.viajeCostoMinimoKilometros("ROM022", EST_LONDRES.getCodigo()), "invalidos");
-    }
-
-    private void verificarCaminoDistanciaMinimoOk(Sistema sistema, AuxTestClaseEstacionNoUsar estacionOrigen, AuxTestClaseEstacionNoUsar estacionDestino,
-                                                  AuxTestConexionNoUsar... conexionesQueSeUsan) {
-        Retorno ret = checkearOk(sistema.viajeCostoMinimoKilometros(estacionOrigen.getCodigo(), estacionDestino.getCodigo()), "El costo minimo no debe dar error");
-
-        double costoTotal = 0;
-        for (AuxTestConexionNoUsar conn : conexionesQueSeUsan) {
-            costoTotal += conn.getKilometros();
-        }
-        Assertions.assertEquals((int) costoTotal, ret.getValorInteger());
-        String retornoEsperado = Stream.concat(Stream.of(estacionOrigen), Arrays.stream(conexionesQueSeUsan).map(AuxTestConexionNoUsar::getDestino))
-                .map(Objects::toString)
-                .collect(Collectors.joining("|"));
-        Assertions.assertEquals(retornoEsperado, ret.getValorString());
-    }
-}
Index: obligatorio-ae2-mar23-tests-v2/.idea/.gitignore
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/.idea/.gitignore b/obligatorio-ae2-mar23-tests-v2/.idea/.gitignore
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/.idea/.gitignore	
+++ /dev/null	
@@ -1,8 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Editor-based HTTP Client requests
-/httpRequests/
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
Index: obligatorio-ae2-mar23-tests-v2/src/main/java/sistema/package-info.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/main/java/sistema/package-info.java b/obligatorio-ae2-mar23-tests-v2/src/main/java/sistema/package-info.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/main/java/sistema/package-info.java	
+++ /dev/null	
@@ -1,4 +0,0 @@
-/**
- * Aca es donde va su implementacion, nada les impide crear sus propios objetos en otros paquetes como dominio
- */
-package sistema;
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/.idea/misc.xml
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/.idea/misc.xml b/obligatorio-ae2-mar23-tests-v2/.idea/misc.xml
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/.idea/misc.xml	
+++ /dev/null	
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="17" project-jdk-type="JavaSDK">
-    <output url="file://$PROJECT_DIR$/out" />
-  </component>
-</project>
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxTestClaseEstacionNoUsar.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxTestClaseEstacionNoUsar.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxTestClaseEstacionNoUsar.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxTestClaseEstacionNoUsar.java	
+++ /dev/null	
@@ -1,36 +0,0 @@
-package sistema;
-
-public class AuxTestClaseEstacionNoUsar {
-    private String codigo;
-    private String nombre;
-
-    public AuxTestClaseEstacionNoUsar(String codigo, String nombre) {
-        this.codigo = codigo;
-        this.nombre = nombre;
-    }
-
-    public String getCodigo() {
-        return codigo;
-    }
-
-    public void setCodigo(String codigo) {
-        this.codigo = codigo;
-    }
-
-    public String getNombre() {
-        return nombre;
-    }
-
-    public void setNombre(String nombre) {
-        this.nombre = nombre;
-    }
-
-    @Override
-    public String toString() {
-        return String.format("%s;%s", codigo, nombre);
-    }
-
-    public static AuxTestClaseEstacionNoUsar estacion(String codigo, String nombre) {
-        return new AuxTestClaseEstacionNoUsar(codigo, nombre);
-    }
-}
Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestTrasbordos.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestTrasbordos.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestTrasbordos.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestTrasbordos.java	
+++ /dev/null	
@@ -1,273 +0,0 @@
-package sistema;
-
-import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.Test;
-
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.Objects;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import java.util.stream.Collectors;
-
-import static sistema.AuxAccionesEstaciones.registrarConexionesOk;
-import static sistema.AuxAccionesEstaciones.registroEstacionOk;
-import static sistema.AuxAsserciones.checkearError;
-import static sistema.AuxAsserciones.checkearOk;
-import static sistema.AuxTestClaseEstacionNoUsar.estacion;
-import interfaz.*;
-
-/**********************************************************
- ************************ ERRORES COMUNES *****************
- * Cosas que pueden estarles pasando y que haga que los tests no funcionen
- * Usar '==' en vez de equals
- * No modelarlos como un multigrafo dirigido, no es lo mismo aristas[a][b] que aristas[b][a]
- * Usar attributos de clase para las agregaciones, que funcionen los test no quita que esto este mal. Lo mejor es usar attributos o objetos creados para esa llamada como por ejemplo un StringBuilder.
- * Mal manejo de los pipes, es mas facil hacer un prepend del pipe (agregarlo al principio) que un append la mayoría de las veces.
- * No usar la recorrida adecuada con el control de saltos correspondiente.
- * Que el máximo de vertices sea 100, no quiere decir que haya 100 vertices
- **********************************************************/
-public class TestTrasbordos {
-
-    private static final String MADRID_1 = "MAD001";
-    private static final String MADRID_2 = "MAD002";
-    private static final String PARIS_1 = "PAR001";
-    private static final String PARIS_2 = "PAR002";
-    private static final String MONTREAL = "MON001";
-    private static final String LYON = "LYO001";
-    private static final String LISBOA = "LIS001";
-    private static final String LONDRES = "LON001";
-
-
-    private static final AuxTestClaseEstacionNoUsar EST_MADRID_1 = estacion(MADRID_1, "MADRID_1");
-    private static final AuxTestClaseEstacionNoUsar EST_MADRID_2 = estacion(MADRID_2, "MADRID_2");
-    private static final AuxTestClaseEstacionNoUsar EST_PARIS_1 = estacion(PARIS_1, "PARIS_1 ");
-    private static final AuxTestClaseEstacionNoUsar EST_PARIS_2 = estacion(PARIS_2, "PARIS_2 ");
-    private static final AuxTestClaseEstacionNoUsar EST_MONTREAL = estacion(MONTREAL, "MONTREAL");
-    private static final AuxTestClaseEstacionNoUsar EST_LYON = estacion(LYON, "LYON ");
-    private static final AuxTestClaseEstacionNoUsar EST_LISBOA = estacion(LISBOA, "LISBOA");
-    private static final AuxTestClaseEstacionNoUsar EST_LONDRES = estacion(LONDRES, "LONDRES ");
-
-    private Sistema tengoUnSistemaValido() {
-        Sistema sis = new ImplementacionSistema();
-        sis.inicializarSistema(20);
-        return sis;
-    }
-
-    public static void main(String[] args) {
-        String[] estaciones = new String[]{"MADRID_1", "MADRID_2", "PARIS_1", "PARIS_2", "LISBOA", "LONDRES", "LYON", "MONTREAL"};
-
-        int id = 1;
-        for (int i = 0; i < estaciones.length; i++) {
-            for (int j = 0; j < estaciones.length; j++) {
-                System.out.printf("private static final TestConexionNoUsar %s_TO_%s=TestConexionNoUsar.conexion(EST_%s,EST_%s,%d);\n",
-                        estaciones[i], estaciones[j], estaciones[i], estaciones[j], id++);
-            }
-        }
-    }
-
-
-    private static final AuxTestConexionNoUsar MADRID_1_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_MADRID_1, 1);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_MADRID_2, 2);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_PARIS_1, 3);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_PARIS_2, 4);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LISBOA, 5);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LONDRES, 6);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_LYON = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LYON, 7);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_MONTREAL, 8);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_MADRID_1, 9);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_MADRID_2, 10);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_PARIS_1, 11);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_PARIS_2, 12);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_LISBOA, 13);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_LONDRES, 14);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_LYON = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_LYON, 15);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_MONTREAL, 16);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_MADRID_1, 17);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_MADRID_2, 18);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_PARIS_1, 19);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_PARIS_2, 20);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_LISBOA, 21);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_LONDRES, 22);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_LYON = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_LYON, 23);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_MONTREAL, 24);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_MADRID_1, 25);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_MADRID_2, 26);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_PARIS_1, 27);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_PARIS_2, 28);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_LISBOA, 29);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_LONDRES, 30);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_LYON = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_LYON, 31);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_MONTREAL, 32);
-    private static final AuxTestConexionNoUsar LISBOA_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_MADRID_1, 33);
-    private static final AuxTestConexionNoUsar LISBOA_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_MADRID_2, 34);
-    private static final AuxTestConexionNoUsar LISBOA_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_PARIS_1, 35);
-    private static final AuxTestConexionNoUsar LISBOA_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_PARIS_2, 36);
-    private static final AuxTestConexionNoUsar LISBOA_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_LISBOA, 37);
-    private static final AuxTestConexionNoUsar LISBOA_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_LONDRES, 38);
-    private static final AuxTestConexionNoUsar LISBOA_TO_LYON = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_LYON, 39);
-    private static final AuxTestConexionNoUsar LISBOA_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_MONTREAL, 40);
-    private static final AuxTestConexionNoUsar LONDRES_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_MADRID_1, 41);
-    private static final AuxTestConexionNoUsar LONDRES_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_MADRID_2, 42);
-    private static final AuxTestConexionNoUsar LONDRES_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_PARIS_1, 43);
-    private static final AuxTestConexionNoUsar LONDRES_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_PARIS_2, 44);
-    private static final AuxTestConexionNoUsar LONDRES_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_LISBOA, 45);
-    private static final AuxTestConexionNoUsar LONDRES_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_LONDRES, 46);
-    private static final AuxTestConexionNoUsar LONDRES_TO_LYON = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_LYON, 47);
-    private static final AuxTestConexionNoUsar LONDRES_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_MONTREAL, 48);
-    private static final AuxTestConexionNoUsar LYON_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_LYON, EST_MADRID_1, 49);
-    private static final AuxTestConexionNoUsar LYON_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_LYON, EST_MADRID_2, 50);
-    private static final AuxTestConexionNoUsar LYON_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_LYON, EST_PARIS_1, 51);
-    private static final AuxTestConexionNoUsar LYON_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_LYON, EST_PARIS_2, 52);
-    private static final AuxTestConexionNoUsar LYON_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_LYON, EST_LISBOA, 53);
-    private static final AuxTestConexionNoUsar LYON_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_LYON, EST_LONDRES, 54);
-    private static final AuxTestConexionNoUsar LYON_TO_LYON = AuxTestConexionNoUsar.conexion(EST_LYON, EST_LYON, 55);
-    private static final AuxTestConexionNoUsar LYON_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_LYON, EST_MONTREAL, 56);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_MADRID_1, 57);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_MADRID_2, 58);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_PARIS_1, 59);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_PARIS_2, 60);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_LISBOA, 61);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_LONDRES, 62);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_LYON = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_LYON, 63);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_MONTREAL, 64);
-
-
-    @Test
-    public void testTrasbordos1() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        registrarConexionesOk(sistema,
-                MADRID_1_TO_MADRID_2,
-                MADRID_1_TO_MADRID_1,
-                MADRID_1_TO_LONDRES,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_MADRID_2
-        );
-        //PAra ver el grafo resultante entrar aquí.
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%22id%3A43%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22id%3A6%22%5D%3B%0AV_1-%3EV_1%5Blabel%3D%22id%3A1%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%22id%3A2%22%5D%3B%0AV_3-%3EV_2%5Blabel%3D%22id%3A18%22%5D%3B%0A%7D%0A
-        //engine recomendado: circo
-        chequearTrasbordoOk(sistema, EST_MADRID_1, 0);
-        //Los adyacentes, ojo con el ciclo madrid1 madrid1, que no puede aparecer repetido
-        chequearTrasbordoOk(sistema, EST_MADRID_1, 1, MADRID_1_TO_MADRID_2, MADRID_1_TO_LONDRES);
-        chequearTrasbordoOk(sistema, EST_MADRID_1, 2, MADRID_1_TO_MADRID_2, MADRID_1_TO_LONDRES, LONDRES_TO_PARIS_1);
-        //No importa que haya mil, si ya pasamos por todo el grafo debe seguir funcionando
-        chequearTrasbordoOk(sistema, EST_MADRID_1, 1000, MADRID_1_TO_MADRID_2, MADRID_1_TO_LONDRES, LONDRES_TO_PARIS_1);
-
-    }
-
-    @Test
-    public void testTrasbordos2() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        //PAra ver el grafo resultante entrar aquí.
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0A%7D%0A
-        //engine recomendado: circo
-        chequearTrasbordoOk(sistema, EST_PARIS_1, 0);
-        chequearTrasbordoOk(sistema, EST_PARIS_1, 100);
-        chequearTrasbordoOk(sistema, EST_PARIS_1, 1000);
-
-    }
-
-    @Test
-    public void testTrasbordos3() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        registrarConexionesOk(sistema,
-                PARIS_1_TO_MADRID_1,
-                MADRID_1_TO_MADRID_2,
-                MADRID_2_TO_LONDRES,
-                LONDRES_TO_PARIS_1,
-                //No importa que haya repetidas
-                AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_MADRID_1, 109),
-                AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_MADRID_1, 110)
-        );
-        //PAra ver el grafo resultante entrar aquí.
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%22id%3A43%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%22id%3A2%22%5D%3B%0AV_2-%3EV_0%5Blabel%3D%22id%3A14%22%5D%3B%0AV_3-%3EV_1%5Blabel%3D%22id%3A17%22%5D%3B%0A%7D%0A
-        //Es una lista circular
-        chequearTrasbordoOk(sistema, EST_PARIS_1, 0);
-        chequearTrasbordoOk(sistema, EST_PARIS_1, 1, PARIS_1_TO_MADRID_1);
-        chequearTrasbordoOk(sistema, EST_PARIS_1, 2, PARIS_1_TO_MADRID_1, MADRID_1_TO_MADRID_2);
-        chequearTrasbordoOk(sistema, EST_PARIS_1, 3, PARIS_1_TO_MADRID_1, MADRID_1_TO_MADRID_2, MADRID_2_TO_LONDRES);
-        //No importa de donde empiece deberia ver la circularidad
-
-        chequearTrasbordoOk(sistema, EST_MADRID_2, 0);
-        chequearTrasbordoOk(sistema, EST_MADRID_2, 1, MADRID_2_TO_LONDRES);
-        chequearTrasbordoOk(sistema, EST_MADRID_2, 2, MADRID_2_TO_LONDRES, LONDRES_TO_PARIS_1);
-        chequearTrasbordoOk(sistema, EST_MADRID_2, 3, MADRID_2_TO_LONDRES, LONDRES_TO_PARIS_1, PARIS_1_TO_MADRID_1);
-
-    }
-
-    @Test
-    public void testTrasbordosError1() {
-        checkearError(Retorno.Resultado.ERROR_1, tengoUnSistemaValido().listadoEstacionesCantTrasbordos(MADRID_1, -1), "La cant en negativa");
-        checkearError(Retorno.Resultado.ERROR_1, tengoUnSistemaValido().listadoEstacionesCantTrasbordos(MADRID_1, -2323), "La cant en negativa");
-    }
-
-    @Test
-    public void testTrasbordosError2() {
-        checkearError(Retorno.Resultado.ERROR_2,
-                tengoUnSistemaValido().listadoEstacionesCantTrasbordos("", 10), "El codigo es nulo o vacio");
-        checkearError(Retorno.Resultado.ERROR_2,
-                tengoUnSistemaValido().listadoEstacionesCantTrasbordos(null, 10), "El codigo es nulo o vacio");
-    }
-
-    @Test
-    public void testTrasbordosError3() {
-        checkearError(Retorno.Resultado.ERROR_3,
-                tengoUnSistemaValido().listadoEstacionesCantTrasbordos("A", 10), "El codigo es invalido");
-        checkearError(Retorno.Resultado.ERROR_3,
-                tengoUnSistemaValido().listadoEstacionesCantTrasbordos("AAAA232", 10), "El codigo es invalido");
-        checkearError(Retorno.Resultado.ERROR_3,
-                tengoUnSistemaValido().listadoEstacionesCantTrasbordos("!@#@~~~!~", 10), "El codigo es invalido");
-        checkearError(Retorno.Resultado.ERROR_3,
-                tengoUnSistemaValido().listadoEstacionesCantTrasbordos("$@$FCCW", 10), "El codigo es invalido");
-        checkearError(Retorno.Resultado.ERROR_3,
-                tengoUnSistemaValido().listadoEstacionesCantTrasbordos("aaa232", 10), "El codigo es invalido");
-    }
-
-    @Test
-    public void testError4() {
-
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearError(Retorno.Resultado.ERROR_4, sistema.listadoEstacionesCantTrasbordos(PARIS_2, 23), "No fue registrada");
-
-        registroEstacionOk(sistema, EST_PARIS_2);
-        checkearOk(sistema.listadoEstacionesCantTrasbordos(PARIS_2, 3), "Ahora que esta registrada debe funcionar");
-        ///chqueamos el reseteo del sistema.
-        sistema.inicializarSistema(20);
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearError(Retorno.Resultado.ERROR_4, sistema.listadoEstacionesCantTrasbordos(PARIS_2, 23), "No fue registrada");
-    }
-
-    private void chequearTrasbordoOk(Sistema sistema, AuxTestClaseEstacionNoUsar estacionOrigen, int cantidad, AuxTestConexionNoUsar... conexionesQueSeUsan) {
-
-        Retorno ret = checkearOk(sistema.listadoEstacionesCantTrasbordos(estacionOrigen.getCodigo(), cantidad), "El listado de trasbordos debe ser valido");
-        //Creamos un array con todas las estaciones usando el destino de las conexiones + la estacion de origen que siempre va a estar en el listado.
-        AuxTestClaseEstacionNoUsar[] estacionesQueDebenEstar = new AuxTestClaseEstacionNoUsar[conexionesQueSeUsan.length + 1];
-        int i = 0;
-        estacionesQueDebenEstar[i++] = estacionOrigen;
-        for (AuxTestConexionNoUsar conexionNoUsar : conexionesQueSeUsan) {
-            estacionesQueDebenEstar[i++] = conexionNoUsar.getDestino();
-        }
-        //primero chequeamos que esten todas las que queremos
-        for (AuxTestClaseEstacionNoUsar estacion : estacionesQueDebenEstar) {
-            Assertions.assertTrue(ret.getValorString().contains(estacion.getCodigo()),
-                    String.format("La estacion '%s' debe de estar pero no esta presente en el listado", estacion.getCodigo()));
-        }
-        Matcher matcher = Pattern.compile("^%s;%s([|]|$)").matcher(ret.getValorString());
-        while (matcher.find()) {
-            String codigoActual = matcher.group().split(";")[0];
-            Arrays.stream(estacionesQueDebenEstar)
-                    .filter(e -> e.getCodigo().equals(codigoActual))
-                    .findFirst()
-                    .orElseThrow(() -> new AssertionError("Esta estacion esta de mas: " + codigoActual));
-        }
-        //segundo ordenamos la lista, y luego chequeamos que los retornos sean iguales. De esta manera nos aseguramos el orden.
-        Arrays.sort(estacionesQueDebenEstar, Comparator.comparing(AuxTestClaseEstacionNoUsar::getCodigo));//NO SE PUEDE USAR EN SU OBLIGATORIO
-        Assertions.assertEquals(Arrays.stream(estacionesQueDebenEstar).map(Objects::toString).collect(Collectors.joining("|")), ret.getValorString());
-
-
-    }
-}
Index: obligatorio-ae2-mar23-tests-v2/.idea/libraries/lib.xml
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/.idea/libraries/lib.xml b/obligatorio-ae2-mar23-tests-v2/.idea/libraries/lib.xml
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/.idea/libraries/lib.xml	
+++ /dev/null	
@@ -1,16 +0,0 @@
-<component name="libraryTable">
-  <library name="lib">
-    <CLASSES>
-      <root url="jar://$PROJECT_DIR$/lib/junit-jupiter-api-5.8.1.jar!/" />
-      <root url="jar://$PROJECT_DIR$/lib/junit-jupiter-5.8.1.jar!/" />
-      <root url="jar://$PROJECT_DIR$/lib/junit-platform-commons-1.8.1.jar!/" />
-      <root url="jar://$PROJECT_DIR$/lib/junit-jupiter-params-5.8.1.jar!/" />
-      <root url="jar://$PROJECT_DIR$/lib/junit-platform-engine-1.8.1.jar!/" />
-      <root url="jar://$PROJECT_DIR$/lib/apiguardian-api-1.1.2.jar!/" />
-      <root url="jar://$PROJECT_DIR$/lib/opentest4j-1.2.0.jar!/" />
-      <root url="jar://$PROJECT_DIR$/lib/junit-jupiter-engine-5.8.1.jar!/" />
-    </CLASSES>
-    <JAVADOC />
-    <SOURCES />
-  </library>
-</component>
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/src/main/java/dominio/package-info.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/main/java/dominio/package-info.java b/obligatorio-ae2-mar23-tests-v2/src/main/java/dominio/package-info.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/main/java/dominio/package-info.java	
+++ /dev/null	
@@ -1,4 +0,0 @@
-/**
- * Aca es donde pueden ir las clases de dominio.
- */
-package dominio;
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxTestConexionNoUsar.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxTestConexionNoUsar.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxTestConexionNoUsar.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxTestConexionNoUsar.java	
+++ /dev/null	
@@ -1,127 +0,0 @@
-package sistema;
-
-import interfaz.EstadoCamino;
-
-public class AuxTestConexionNoUsar {
-    private AuxTestClaseEstacionNoUsar origen;
-    private AuxTestClaseEstacionNoUsar destino;
-    private int id;
-    private double costo, tiempo, kilometros;
-    private EstadoCamino estado;
-
-
-    public AuxTestConexionNoUsar(AuxTestClaseEstacionNoUsar origen, AuxTestClaseEstacionNoUsar destino, int id, double costo, double tiempo, double kilometros, EstadoCamino estado) {
-        this.origen = origen;
-        this.destino = destino;
-        this.id = id;
-        this.costo = costo;
-        this.tiempo = tiempo;
-        this.kilometros = kilometros;
-        this.estado = estado;
-    }
-
-    public static AuxTestConexionNoUsar conexion(AuxTestClaseEstacionNoUsar origen, AuxTestClaseEstacionNoUsar destino, int id) {
-
-        return new AuxTestConexionNoUsar(origen, destino, id, 1, 1, 1, EstadoCamino.BUENO);
-    }
-
-    public static AuxTestConexionNoUsar conexion(AuxTestClaseEstacionNoUsar origen, AuxTestClaseEstacionNoUsar destino, int id, double costo, double tiempo, double kilometros, EstadoCamino estado) {
-        return new AuxTestConexionNoUsar(origen, destino, id, costo, tiempo, kilometros, estado);
-    }
-
-    public static AuxTestConexionNoUsar conexion(String origen, String destino, int id, double costo, double tiempo, double kilometros, EstadoCamino estado) {
-        return new AuxTestConexionNoUsar(AuxTestClaseEstacionNoUsar.estacion(origen, ""), AuxTestClaseEstacionNoUsar.estacion(destino, ""), id, costo, tiempo, kilometros, estado);
-    }
-
-    public String getCodOrig() {
-        return origen.getCodigo();
-    }
-
-    public String getCodDest() {
-        return destino.getCodigo();
-    }
-
-    public AuxTestClaseEstacionNoUsar getOrigen() {
-        return origen;
-    }
-
-    public void setOrigen(AuxTestClaseEstacionNoUsar origen) {
-        this.origen = origen;
-    }
-
-    public AuxTestClaseEstacionNoUsar getDestino() {
-        return destino;
-    }
-
-    public void setDestino(AuxTestClaseEstacionNoUsar destino) {
-        this.destino = destino;
-    }
-
-    public int getId() {
-        return id;
-    }
-
-    public void setId(int id) {
-        this.id = id;
-    }
-
-    public double getCosto() {
-        return costo;
-    }
-
-    public void setCosto(double costo) {
-        this.costo = costo;
-    }
-
-    public double getTiempo() {
-        return tiempo;
-    }
-
-    public void setTiempo(double tiempo) {
-        this.tiempo = tiempo;
-    }
-
-    public double getKilometros() {
-        return kilometros;
-    }
-
-    public void setKilometros(double kilometros) {
-        this.kilometros = kilometros;
-    }
-
-    public EstadoCamino getEstado() {
-        return estado;
-    }
-
-    public void setEstado(EstadoCamino estado) {
-        this.estado = estado;
-    }
-
-    /**
-     * Crea una copia con el nuevo estado de camino.
-     *
-     * @param estado Estado nuevo
-     * @return una copia actualizada.
-     */
-    public AuxTestConexionNoUsar withEstado(EstadoCamino estado) {
-        return new AuxTestConexionNoUsar(origen, destino, id, costo, tiempo, kilometros, estado);
-    }
-
-    public AuxTestConexionNoUsar withKm(double km) {
-        return new AuxTestConexionNoUsar(origen, destino, id, costo, tiempo, km, estado);
-    }
-
-    public AuxTestConexionNoUsar withCosto(double costo) {
-
-        return new AuxTestConexionNoUsar(origen, destino, id, costo, tiempo, kilometros, estado);
-    }
-
-    public AuxTestConexionNoUsar withTiempo(double tiempo) {
-
-        return new AuxTestConexionNoUsar(origen, destino, id, costo, tiempo, kilometros, estado);
-    }
-
-    public AuxTestConexionNoUsar withId(int id) {
-        return new AuxTestConexionNoUsar(origen, destino, id, costo, tiempo, kilometros, estado);
-    }
-}
Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestFiltroPasajeros.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestFiltroPasajeros.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestFiltroPasajeros.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestFiltroPasajeros.java	
+++ /dev/null	
@@ -1,142 +0,0 @@
-package sistema;
-
-import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.Test;
-
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.Objects;
-import java.util.Random;
-import java.util.logging.Logger;
-import java.util.stream.Collectors;
-
-import static sistema.AuxAsserciones.checkearError;
-import static sistema.AuxAsserciones.checkearOk;
-import  interfaz.*;
-
-/**********************************************************
- ************************ ERRORES COMUNES *****************
- * Cosas que pueden estarles pasando y que haga que los tests no funcionen
- * Orden lexicografico en vez de númerico
- * Usar '==' en vez de equals
- * Usar attributos de clase para las agregaciones, que funcionen los test no quita que esto este mal. Lo mejor es usar attributos o objetos creados para esa llamada como por ejemplo un StringBuilder.
- * Mal manejo de los pipes, es mas facil hacer un prepend del pipe (agregarlo al principio) que un append la mayoría de las veces.
- * No tener bien hecha la recursión
- **********************************************************/
-public class TestFiltroPasajeros {
-
-    private static final AuxTestPasajeroNoUsar ALEMANIA_22_JORGEN = AuxTestPasajeroNoUsar.pasajero(Nacionalidad.Alemania, 12_000_002, "Jorgen", 22, -1);
-    private static final AuxTestPasajeroNoUsar ALEMANIA_15_JORGEN = AuxTestPasajeroNoUsar.pasajero(Nacionalidad.Alemania, 1_800_002, "Jorgen", 15, -1);
-    private static final AuxTestPasajeroNoUsar ALEMANIA_60_ISOLDE = AuxTestPasajeroNoUsar.pasajero(Nacionalidad.Alemania, 91_000_002, "Isolde", 60, -1);
-    private static final AuxTestPasajeroNoUsar ALEMANIA_80_TRISTAN = AuxTestPasajeroNoUsar.pasajero(Nacionalidad.Alemania, 1_200_002, "Tristan", 80, -1);
-    private static final AuxTestPasajeroNoUsar FRANCIA_26_MARIE = AuxTestPasajeroNoUsar.pasajero(Nacionalidad.Francia, 11_005_002, "Marie", 26, -1);
-    private static final AuxTestPasajeroNoUsar ALEMANIA_26_MARIE = AuxTestPasajeroNoUsar.pasajero(Nacionalidad.Alemania, 21_105_002, "Marie", 26, -1);
-    private static final AuxTestPasajeroNoUsar UK_31_SOPHIE = AuxTestPasajeroNoUsar.pasajero(Nacionalidad.ReinoUnido, 41_215_002, "Sophie", 26, -1);
-    private static final AuxTestPasajeroNoUsar UK_80_HARRY = AuxTestPasajeroNoUsar.pasajero(Nacionalidad.ReinoUnido, 51_225_022, "Harry", 26, -1);
-    private static final AuxTestPasajeroNoUsar UK_10_HARRY = AuxTestPasajeroNoUsar.pasajero(Nacionalidad.ReinoUnido, 61_225_222, "Harry", 10, -1);
-    private static final AuxTestPasajeroNoUsar ES_55_ROBERTO = AuxTestPasajeroNoUsar.pasajero(Nacionalidad.Espania, 11_225_222, "Roberto", 55, -1);
-    private static final AuxTestPasajeroNoUsar ES_82_ALBERTA = AuxTestPasajeroNoUsar.pasajero(Nacionalidad.Espania, 14_225_222, "Alberta", 82, -1);
-
-    @Test
-    public void filtroPasajerosOk() {
-        Sistema sistema = tengoUnSistemaValido();
-        Consulta consulta = Consulta.fromString("[[nombre='Jorgen' AND edad > 15] OR [nombre='Marie' AND edad>20]] AND [nacionalidad='DE']");
-        //El arbol de la consulta lo pueden ver en:
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AR%20%5Blabel%3D%22And%22%5D%3B%0AR_L%20%5Blabel%3D%22Or%22%5D%3B%0AR%20-%3E%20R_L%3B%0AR_L_L%20%5Blabel%3D%22And%22%5D%3B%0AR_L%20-%3E%20R_L_L%3B%0AR_L_L_L%20%5Blabel%3D%22NombreIgual%20%5BJorgen%5D%22%5D%3B%0AR_L_L%20-%3E%20R_L_L_L%3B%0AR_L_L_R%20%5Blabel%3D%22EdadMayor%20%5B15%5D%22%5D%3B%0AR_L_L%20-%3E%20R_L_L_R%3B%0AR_L_R%20%5Blabel%3D%22And%22%5D%3B%0AR_L%20-%3E%20R_L_R%3B%0AR_L_R_L%20%5Blabel%3D%22NombreIgual%20%5BMarie%5D%22%5D%3B%0AR_L_R%20-%3E%20R_L_R_L%3B%0AR_L_R_R%20%5Blabel%3D%22EdadMayor%20%5B20%5D%22%5D%3B%0AR_L_R%20-%3E%20R_L_R_R%3B%0AR_R%20%5Blabel%3D%22Nacionalidad%20%5BAlemania%5D%22%5D%3B%0AR%20-%3E%20R_R%3B%0A%7D
-        verificarFiltroPasajeros(sistema, consulta);
-        registrarTodosLosPasajeros(sistema);
-        verificarFiltroPasajeros(sistema, consulta, ALEMANIA_22_JORGEN, ALEMANIA_26_MARIE);
-        sistema.inicializarSistema(20);//reinicio el sistema
-        registrarTodosLosPasajeros(sistema);
-        //el resultado tiene que ser el mismo
-        verificarFiltroPasajeros(sistema, consulta, ALEMANIA_22_JORGEN, ALEMANIA_26_MARIE);
-        verificarFiltroPasajeros(sistema, Consulta.fromString("[nacionalidad='DE'] OR [edad>50]"),
-                ALEMANIA_15_JORGEN, ALEMANIA_60_ISOLDE, ALEMANIA_80_TRISTAN,
-                ALEMANIA_22_JORGEN, ALEMANIA_26_MARIE, ES_55_ROBERTO, ES_82_ALBERTA);
-        verificarFiltroPasajeros(sistema, Consulta.fromString("nacionalidad='ES'"),
-                ES_82_ALBERTA, ES_55_ROBERTO);
-    }
-
-    @Test
-    public void filtroPasajerosError1() {
-        Sistema sis = tengoUnSistemaValido();
-        checkearError(Retorno.Resultado.ERROR_1, sis.filtrarPasajeros(null), "Cuando es vacio tiene que devolver error 1");
-    }
-
-    @Test
-    public void filtroPasajerosOkConDatosRandom() {
-
-        //NO traten de depurar esto porque agrega una cantidad inmanejable. Tienen que funcionar los otros test y sino buscar donde esta el error.
-        Sistema sistema = tengoUnSistemaValido();
-        Consulta consulta = Consulta.fromString("[[nombre='Jorgen' AND edad > 15] OR [nombre='Marie' AND edad>20]] AND [nacionalidad='DE']");
-        Random r = new Random(230_222);
-        int cantidadAgregadosCorrectamente = 0;
-        String[] nombresASeleccionar = new String[]{"Sofia", "Aquiles", "Pablo", "Federico", "Pia", "Paula", "Alvaro"};
-        String[] apellidos = new String[]{"Perez", "Rodriguez", "Fernandez", "Muller", "Murphy", "Prost"};
-
-        int[][] nombresApellidosCorrectos = new int[nombresASeleccionar.length][apellidos.length];
-
-        AuxTestPasajeroNoUsar[] pasajerosAgregados = new AuxTestPasajeroNoUsar[10_000];
-        AuxTestPasajeroNoUsar[] pasajerosConNombreAquilesProst = new AuxTestPasajeroNoUsar[10_000];
-        int idx2 = 0;
-        for (int i = 0; i < 10_000; i++) {
-            int idxNom = r.nextInt(nombresASeleccionar.length);
-            int idxApellido = r.nextInt(apellidos.length);
-            int edad = r.nextInt(40) + 10;
-            String nombreCompleto = nombresASeleccionar[idxNom] + " " + apellidos[idxApellido];
-            AuxTestPasajeroNoUsar pasajero = AuxTestPasajeroNoUsar.pasajero(Nacionalidad.Otro, r.nextInt(10_000) + 1_000_000,
-                    nombreCompleto, edad, -1);
-            //System.out.println(sistema.registrarPasajero(pasajero.getIdentificador(), pasajero.getNombre(), pasajero.getEdad()).getResultado());
-            if (sistema.registrarPasajero(pasajero.getIdentificador(), pasajero.getNombre(), pasajero.getEdad()).isOk()) {
-                pasajerosAgregados[cantidadAgregadosCorrectamente] = pasajero;
-                cantidadAgregadosCorrectamente++;
-                nombresApellidosCorrectos[idxNom][idxApellido]++;
-                if (pasajero.getNombre().equals("Aquiles Prost")) {
-                    pasajerosConNombreAquilesProst[idx2++] = pasajero;
-                }
-
-            }
-        }
-        Logger.getLogger(TestFiltroPasajeros.class.getName()).info("Agregamos correctamente " + cantidadAgregadosCorrectamente + " pasajeros");
-        //Todo lo que agregamos no debería afectar a las consultas anteriores
-        //El arbol de la consulta lo pueden ver en:
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AR%20%5Blabel%3D%22And%22%5D%3B%0AR_L%20%5Blabel%3D%22Or%22%5D%3B%0AR%20-%3E%20R_L%3B%0AR_L_L%20%5Blabel%3D%22And%22%5D%3B%0AR_L%20-%3E%20R_L_L%3B%0AR_L_L_L%20%5Blabel%3D%22NombreIgual%20%5BJorgen%5D%22%5D%3B%0AR_L_L%20-%3E%20R_L_L_L%3B%0AR_L_L_R%20%5Blabel%3D%22EdadMayor%20%5B15%5D%22%5D%3B%0AR_L_L%20-%3E%20R_L_L_R%3B%0AR_L_R%20%5Blabel%3D%22And%22%5D%3B%0AR_L%20-%3E%20R_L_R%3B%0AR_L_R_L%20%5Blabel%3D%22NombreIgual%20%5BMarie%5D%22%5D%3B%0AR_L_R%20-%3E%20R_L_R_L%3B%0AR_L_R_R%20%5Blabel%3D%22EdadMayor%20%5B20%5D%22%5D%3B%0AR_L_R%20-%3E%20R_L_R_R%3B%0AR_R%20%5Blabel%3D%22Nacionalidad%20%5BAlemania%5D%22%5D%3B%0AR%20-%3E%20R_R%3B%0A%7D
-        verificarFiltroPasajeros(sistema, consulta);
-        registrarTodosLosPasajeros(sistema);
-        verificarFiltroPasajeros(sistema, consulta, ALEMANIA_22_JORGEN, ALEMANIA_26_MARIE);
-        verificarFiltroPasajeros(sistema, Consulta.fromString("[nacionalidad='DE'] OR [edad>50]"),
-                ALEMANIA_15_JORGEN, ALEMANIA_60_ISOLDE, ALEMANIA_80_TRISTAN,
-                ALEMANIA_22_JORGEN, ALEMANIA_26_MARIE, ES_55_ROBERTO, ES_82_ALBERTA);
-        verificarFiltroPasajeros(sistema, Consulta.fromString("nacionalidad='ES'"),
-                ES_82_ALBERTA, ES_55_ROBERTO);
-        verificarFiltroPasajeros(sistema, Consulta.fromString("nacionalidad='OT'"),
-                pasajerosAgregados);
-        verificarFiltroPasajeros(sistema, Consulta.fromString("nacionalidad='OT' AND nombre='Aquiles Prost'"),
-                pasajerosConNombreAquilesProst);
-        verificarFiltroPasajeros(sistema, Consulta.fromString("nacionalidad='UK' AND nombre='Aquiles Prost'"));
-    }
-
-    private Sistema tengoUnSistemaValidoConTodosLosPasajeros() {
-        Sistema sistema = tengoUnSistemaValido();
-        registrarTodosLosPasajeros(sistema);
-        return sistema;
-    }
-
-    private static void registrarTodosLosPasajeros(Sistema sistema) {
-        AuxAccionesPasajeros.agregoPasajerosOk(sistema, ALEMANIA_22_JORGEN, ALEMANIA_15_JORGEN, ALEMANIA_60_ISOLDE,
-                ALEMANIA_80_TRISTAN, FRANCIA_26_MARIE, ALEMANIA_26_MARIE, UK_31_SOPHIE, UK_80_HARRY, UK_10_HARRY,
-                ES_55_ROBERTO, ES_82_ALBERTA);
-    }
-
-    private void verificarFiltroPasajeros(Sistema sistema, Consulta consulta, AuxTestPasajeroNoUsar... pasajerosEsperados) {
-        Retorno retorno = checkearOk(sistema.filtrarPasajeros(consulta), "Se esperaba que el filtro funcionara correctamente");
-        Arrays.sort(pasajerosEsperados, Comparator.nullsLast(Comparator.comparing(p -> p.getNumeroId())));
-        Assertions.assertEquals(Arrays.stream(pasajerosEsperados).filter(Objects::nonNull).map(v -> v.getIdentificador()).collect(Collectors.joining("|")), retorno.getValorString());
-    }
-
-    private Sistema tengoUnSistemaValido() {
-        Sistema sistema = new ImplementacionSistema();
-        sistema.inicializarSistema(20);
-        return sistema;
-    }
-}
Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestEstacionesConexiones.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestEstacionesConexiones.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestEstacionesConexiones.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestEstacionesConexiones.java	
+++ /dev/null	
@@ -1,295 +0,0 @@
-package sistema;
-
-import org.junit.jupiter.api.Test;
-
-import static sistema.AuxAccionesEstaciones.registroEstacion;
-import static sistema.AuxAccionesEstaciones.registroEstacionOk;
-import static sistema.AuxAsserciones.checkearError;
-import static sistema.AuxAsserciones.checkearOk;
-import static sistema.AuxTestClaseEstacionNoUsar.estacion;
-import static interfaz.EstadoCamino.*;
-import static interfaz.Retorno.Resultado.*;
-import  interfaz.*;
-
-/**********************************************************
- ************************ ERRORES COMUNES *****************
- * Cosas que pueden estarles pasando y que haga que los tests no funcionen
- * Usar '==' en vez de equals
- * No modelarlos como un multigrafo dirigido, no es lo mismo aristas[a][b] que aristas[b][a]
- * Usar attributos de clase para las agregaciones, que funcionen los test no quita que esto este mal. Lo mejor es usar attributos o objetos creados para esa llamada como por ejemplo un StringBuilder.
- * Mal manejo de los pipes, es mas facil hacer un prepend del pipe (agregarlo al principio) que un append la mayoría de las veces.
- **********************************************************/
-public class TestEstacionesConexiones {
-
-
-    private static final String MADRID_1 = "MAD001";
-    private static final String MADRID_2 = "MAD002";
-    private static final String PARIS_1 = "PAR001";
-    private static final String PARIS_2 = "PAR001";
-    private static final String MONTREAL = "MON001";
-    private static final String LYON = "LYO001";
-    private static final String LISBOA = "LIS001";
-    private static final String LONDRES = "LON001";
-
-
-    private static final AuxTestClaseEstacionNoUsar EST_MADRID_1 = estacion(MADRID_1, "MADRID_1");
-    private static final AuxTestClaseEstacionNoUsar EST_MADRID_2 = estacion(MADRID_2, "MADRID_2");
-    private static final AuxTestClaseEstacionNoUsar EST_PARIS_1 = estacion(PARIS_1, "PARIS_1 ");
-    private static final AuxTestClaseEstacionNoUsar EST_PARIS_2 = estacion(PARIS_2, "PARIS_2 ");
-    private static final AuxTestClaseEstacionNoUsar EST_MONTREAL = estacion(MONTREAL, "MONTREAL");
-    private static final AuxTestClaseEstacionNoUsar EST_LYON = estacion(LYON, "LYON ");
-    private static final AuxTestClaseEstacionNoUsar EST_LISBOA = estacion(LISBOA, "LISBOA");
-    private static final AuxTestClaseEstacionNoUsar EST_LONDRES = estacion(LONDRES, "LONDRES ");
-
-    private Sistema tengoUnSistemaValido() {
-        return tengoUnSistemaValido(20);
-    }
-
-    private Sistema tengoUnSistemaValido(int maxEstaciones) {
-        ImplementacionSistema impl = new ImplementacionSistema();
-        impl.inicializarSistema(maxEstaciones);
-        return impl;
-    }
-
-    @Test
-    public void testInicializarError1() {
-        Sistema sis = new ImplementacionSistema();
-        checkearError(ERROR_1, sis.inicializarSistema(5), "Deberia dar error");
-        checkearError(ERROR_1, sis.inicializarSistema(-5), "Deberia dar error");
-    }
-
-    @Test
-    public void testRegistrarEstacionOk() {
-        Sistema sistema = tengoUnSistemaValido();
-        checkearOk(registroEstacion(sistema, estacion("AAA002", "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-        checkearOk(registroEstacion(sistema, estacion("AAA000", "Otro nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-        checkearOk(registroEstacion(sistema, estacion("ABB149", "Un nombre")), "La estacion es valida por lo que debería haberse registrado");
-        checkearOk(registroEstacion(sistema, estacion("ZZZ999", "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-
-    }
-
-    @Test
-    public void testRegistrarEstacionError1() {
-        Sistema sistema = tengoUnSistemaValido(6);
-
-        for (int i = 0; i < 6; i++) {
-
-            checkearOk(registroEstacion(sistema, estacion("AAA00" + i, "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-        }
-        checkearError(ERROR_1, registroEstacion(sistema, estacion("BBB023", "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-    }
-
-    @Test
-    public void testRegistrarEstacionError1ConReinicioDelSistema() {
-        Sistema sistema = tengoUnSistemaValido(6);
-
-        for (int i = 0; i < 6; i++) {
-
-            checkearOk(registroEstacion(sistema, estacion("AAA00" + i, "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-        }
-        checkearError(ERROR_1, registroEstacion(sistema, estacion("BBB023", "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-        sistema.inicializarSistema(10);
-        for (int i = 0; i < 10; i++) {
-
-            checkearOk(registroEstacion(sistema, estacion("AAA00" + i, "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-        }
-        checkearError(ERROR_1, registroEstacion(sistema, estacion("BBB023", "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-    }
-
-    @Test
-    public void testRegistrarEstacionError2() {
-        Sistema sistema = tengoUnSistemaValido();
-        checkearError(ERROR_2, registroEstacion(sistema, estacion(null, "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-        checkearError(ERROR_2, registroEstacion(sistema, estacion(null, null)), "La estacion es valida por lo que debería haberse registrado");
-        checkearError(ERROR_2, registroEstacion(sistema, estacion(null, null)), "La estacion es valida por lo que debería haberse registrado");
-
-    }
-
-    @Test
-    public void testRegistrarEstacionError3() {
-        Sistema sistema = tengoUnSistemaValido();
-        checkearError(ERROR_3, registroEstacion(sistema, estacion("AA@322", "Un nombre valido")), "La estacion no tiene codigo valido");
-        checkearError(ERROR_3, registroEstacion(sistema, estacion("AA2322", "Un nombre valido")), "La estacion no tiene codigo valido");
-        checkearError(ERROR_3, registroEstacion(sistema, estacion("aaa322", "Un nombre valido")), "La estacion no tiene codigo valido");
-        checkearError(ERROR_3, registroEstacion(sistema, estacion("AAB42!", "Un nombre valido")), "La estacion no tiene codigo valido");
-    }
-
-    @Test
-    public void testRegistrarEstacion4() {
-
-        Sistema sistema = tengoUnSistemaValido();
-        checkearOk(registroEstacion(sistema, estacion("AAA004", "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-        checkearOk(registroEstacion(sistema, estacion("AAA231", "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-        checkearOk(registroEstacion(sistema, estacion("AAA121", "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-        checkearOk(registroEstacion(sistema, estacion("AXZ124", "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-        checkearOk(registroEstacion(sistema, estacion("ABZ124", "Un nombre valido")), "La estacion es valida por lo que debería haberse registrado");
-
-        checkearError(ERROR_4, registroEstacion(sistema, estacion("AXZ124", "Un nombre valido")), "La estacion deberia estar duplicada");
-
-    }
-
-    @Test
-    public void testRegistrarConexionOk() {
-
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_PARIS_1, EST_MADRID_2);
-        checkearOk(sistema.registrarConexion(LONDRES, MADRID_1, 1, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        //el grafo es dirigido
-        checkearOk(sistema.registrarConexion(MADRID_1, LONDRES, 1, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        checkearOk(sistema.registrarConexion(MADRID_1, PARIS_1, 1, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-
-    }
-
-    @Test
-    public void testRegistrarConexionError1() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearError(ERROR_1, sistema.registrarConexion(MADRID_1, MADRID_2, -1, 222, 333, 22, EstadoCamino.BUENO), "negativos");
-        checkearError(ERROR_1, sistema.registrarConexion(MADRID_1, MADRID_2, 12, -222, 333, 22, EstadoCamino.BUENO), "negativos");
-        checkearError(ERROR_1, sistema.registrarConexion(MADRID_1, MADRID_2, 1, 222, -333, 22, EstadoCamino.BUENO), "negativos");
-        checkearError(ERROR_1, sistema.registrarConexion(MADRID_1, MADRID_2, 1, 222, 333, -22, EstadoCamino.BUENO), "negativos");
-        checkearError(ERROR_1, sistema.registrarConexion(MADRID_1, MADRID_2, -1, -222, -333, 22, EstadoCamino.BUENO), "negativos");
-        checkearError(ERROR_1, sistema.registrarConexion(MADRID_1, MADRID_2, 0, -222, -333, 22, EstadoCamino.BUENO), "negativos");
-
-    }
-
-    @Test
-    public void testRegistrarConexionError2() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearError(ERROR_2, sistema.registrarConexion(MADRID_1, "", 1, 222, 333, 22, EstadoCamino.BUENO), "nulos");
-        checkearError(ERROR_2, sistema.registrarConexion(null, "", 1, 222, 333, 22, EstadoCamino.BUENO), "nulos");
-        checkearError(ERROR_2, sistema.registrarConexion(null, MADRID_2, 1, 222, 333, 22, EstadoCamino.BUENO), "nulos");
-        checkearError(ERROR_2, sistema.registrarConexion(null, MADRID_2, 1, 222, 333, 22, null), "nulos");
-
-    }
-
-    @Test
-    public void testRegistrarConexionError3() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearError(ERROR_3, sistema.registrarConexion(MADRID_1, "ZADDD@23", 1, 222, 333, 22, EstadoCamino.BUENO), "codigos invalidos");
-        checkearError(ERROR_3, sistema.registrarConexion("ADSQ!2", "ZADDD@23", 1, 222, 333, 22, EstadoCamino.BUENO), "codigos invalidos");
-        checkearError(ERROR_3, sistema.registrarConexion("~AAA233", "ZADDD@23", 1, 222, 333, 22, EstadoCamino.BUENO), "codigos invalidos");
-
-    }
-
-
-    @Test
-    public void testRegistrarConexionError4() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearError(ERROR_4, sistema.registrarConexion(MONTREAL, MADRID_1, 1, 222, 333, 22, EstadoCamino.BUENO), "codigos invalidos");
-
-    }
-
-    @Test
-    public void testRegistrarConexionError5() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearError(ERROR_5, sistema.registrarConexion(MADRID_1, MONTREAL, 1, 222, 333, 22, EstadoCamino.BUENO), "codigos invalidos");
-    }
-
-    @Test
-    public void testRegistrarConexionError6() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearOk(sistema.registrarConexion(LONDRES, MADRID_1, 1, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        checkearOk(sistema.registrarConexion(LONDRES, MADRID_2, 1, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        //Las conexiones no son navegables en ambos sentidos, por lo que lo siguiente es ok
-        checkearOk(sistema.registrarConexion(MADRID_2, LONDRES, 1, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        // Si hay queremos registrar otra tendriamos que poner otro identificador. El tema es que no lo cambiamos por lo que nos da error 6
-        checkearError(ERROR_6, sistema.registrarConexion(MADRID_2, LONDRES, 1, 100, 20, 300, EstadoCamino.BUENO), "El codigo esta repetido");
-        //Al cambiarlo no hay problema
-        checkearOk(sistema.registrarConexion(MADRID_2, LONDRES, 2, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        checkearOk(sistema.registrarConexion(MADRID_2, LONDRES, 3, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        checkearError(ERROR_6, sistema.registrarConexion(MADRID_2, LONDRES, 2, 100, 20, 300, EstadoCamino.BUENO), "El codigo esta repetido");
-    }
-
-    @Test
-    public void testActualizarConexionOk() {
-
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_PARIS_1, EST_MADRID_2);
-        checkearOk(sistema.registrarConexion(LONDRES, MADRID_1, 1, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        //el grafo es dirigido
-        checkearOk(sistema.registrarConexion(MADRID_1, LONDRES, 1, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        checkearOk(sistema.registrarConexion(MADRID_1, LONDRES, 2, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        checkearOk(sistema.registrarConexion(MADRID_1, PARIS_1, 1, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-
-        checkearOk(sistema.actualizarCamino(MADRID_1, LONDRES, 1, 20, 30, 40, EstadoCamino.MALO), "Todos los parametros estan bien y la conexión existe");
-        checkearOk(sistema.actualizarCamino(MADRID_1, LONDRES, 1, 10, 340, 40, EstadoCamino.EXCELENTE), "Todos los parametros estan bien y la conexión existe");
-        checkearOk(sistema.actualizarCamino(LONDRES, MADRID_1, 1, 20, 30, 40, EstadoCamino.MALO), "Todos los parametros estan bien y la conexión existe");
-        checkearOk(sistema.actualizarCamino(MADRID_1, LONDRES, 2, 30, 200, 300, EstadoCamino.BUENO), "Es una conexion valida");
-
-    }
-
-    @Test
-    public void testActualizarConexionError1() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearOk(sistema.registrarConexion(MADRID_1, MADRID_2, 1, 222, 333, 22, EstadoCamino.BUENO), "negativos");
-        checkearError(ERROR_1, sistema.actualizarCamino(MADRID_1, MADRID_2, -1, 222, 333, 22, EstadoCamino.BUENO), "negativos");
-        checkearError(ERROR_1, sistema.actualizarCamino(MADRID_1, MADRID_2, 12, -222, 333, 22, EstadoCamino.BUENO), "negativos");
-        checkearError(ERROR_1, sistema.actualizarCamino(MADRID_1, MADRID_2, 1, 222, -333, 22, EstadoCamino.BUENO), "negativos");
-        checkearError(ERROR_1, sistema.actualizarCamino(MADRID_1, MADRID_2, 1, 222, 333, -22, EstadoCamino.BUENO), "negativos");
-        checkearError(ERROR_1, sistema.actualizarCamino(MADRID_1, MADRID_2, -1, -222, -333, 22, EstadoCamino.BUENO), "negativos");
-        checkearError(ERROR_1, sistema.actualizarCamino(MADRID_1, MADRID_2, 0, -222, -333, 22, EstadoCamino.BUENO), "negativos");
-
-    }
-
-    @Test
-    public void testActualizarConexionError2() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearError(ERROR_2, sistema.actualizarCamino(MADRID_1, "", 1, 222, 333, 22, EstadoCamino.BUENO), "nulos");
-        checkearError(ERROR_2, sistema.actualizarCamino(null, "", 1, 222, 333, 22, EstadoCamino.BUENO), "nulos");
-        checkearError(ERROR_2, sistema.actualizarCamino(null, MADRID_2, 1, 222, 333, 22, EstadoCamino.BUENO), "nulos");
-        checkearError(ERROR_2, sistema.actualizarCamino(null, MADRID_2, 1, 222, 333, 22, null), "nulos");
-
-    }
-
-    @Test
-    public void testActualizarConexionError3() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearError(ERROR_3, sistema.actualizarCamino(MADRID_1, "ZADDD@23", 1, 222, 333, 22, EstadoCamino.BUENO), "codigos invalidos");
-        checkearError(ERROR_3, sistema.actualizarCamino("ADSQ!2", "ZADDD@23", 1, 222, 333, 22, EstadoCamino.BUENO), "codigos invalidos");
-        checkearError(ERROR_3, sistema.actualizarCamino("~AAA233", "ZADDD@23", 1, 222, 333, 22, EstadoCamino.BUENO), "codigos invalidos");
-
-    }
-
-
-    @Test
-    public void testActualizarConexionError4() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearError(ERROR_4, sistema.actualizarCamino(MONTREAL, MADRID_1, 1, 222, 333, 22, EstadoCamino.BUENO), "codigos invalidos");
-
-    }
-
-    @Test
-    public void testActualizarConexionError5() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearError(ERROR_5, sistema.actualizarCamino(MADRID_1, MONTREAL, 1, 222, 333, 22, EstadoCamino.BUENO), "codigos invalidos");
-    }
-
-    @Test
-    public void testActualizarConexionError6() {
-        Sistema sistema = tengoUnSistemaValido();
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        checkearOk(sistema.registrarConexion(LONDRES, MADRID_1, 1, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        checkearOk(sistema.registrarConexion(LONDRES, MADRID_2, 1, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        checkearOk(sistema.registrarConexion(MADRID_2, LONDRES, 1, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        checkearOk(sistema.registrarConexion(MADRID_2, LONDRES, 2, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        checkearOk(sistema.registrarConexion(MADRID_2, LONDRES, 3, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        checkearOk(sistema.registrarConexion(MADRID_1, PARIS_1, 3, 100, 20, 300, EstadoCamino.BUENO), "Es una conexion valida");
-        checkearError(ERROR_6, sistema.actualizarCamino(MADRID_2, LONDRES, 4, 100, 20, 300, EstadoCamino.BUENO), "El id de camino no esta registrado");
-        checkearError(ERROR_6, sistema.actualizarCamino(PARIS_1, LONDRES, 2, 100, 20, 300, EstadoCamino.BUENO), "No ningun camino");
-        //Recuerden que el grafo es dirigido
-        checkearError(ERROR_6, sistema.actualizarCamino(PARIS_1, MADRID_1, 1, 100, 20, 300, EstadoCamino.BUENO), "El id de camino no esta registrado");
-    }
-
-
-}
Index: obligatorio-ae2-mar23-tests-v2/src/main/java/sistema/ImplementacionSistema.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/main/java/sistema/ImplementacionSistema.java b/obligatorio-ae2-mar23-tests-v2/src/main/java/sistema/ImplementacionSistema.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/main/java/sistema/ImplementacionSistema.java	
+++ /dev/null	
@@ -1,76 +0,0 @@
-package sistema;
-
-import interfaz.*;
-
-public class ImplementacionSistema implements Sistema {
-
-    @Override
-    public Retorno inicializarSistema(int maxEstaciones) {
-        return Retorno.noImplementada();
-    }
-
-    @Override
-    public Retorno registrarPasajero(String identificador, String nombre, int edad) {
-        return Retorno.noImplementada();
-    }
-
-    @Override
-    public Retorno filtrarPasajeros(Consulta consulta) {
-        return Retorno.noImplementada();
-    }
-
-    @Override
-    public Retorno buscarPasajero(String identificador) {
-        return Retorno.noImplementada();
-    }
-
-    @Override
-    public Retorno listarPasajerosAscendente() {
-        return Retorno.noImplementada();
-    }
-
-    @Override
-    public Retorno listarPasajerosDescendente() {
-        return Retorno.noImplementada();
-    }
-
-    @Override
-    public Retorno listarPasajerosPorNacionalidad(Nacionalidad nacionalidad) {
-        return Retorno.noImplementada();
-    }
-
-    @Override
-    public Retorno registrarEstacionDeTren(String codigo, String nombre) {
-        return Retorno.noImplementada();
-    }
-
-    @Override
-    public Retorno registrarConexion(String codigoEstacionOrigen, String codigoEstacionDestino,
-                                     int identificadorConexion, double costo, double tiempo, double kilometros,
-                                     EstadoCamino estadoDeLaConexion) {
-        return Retorno.noImplementada();
-    }
-
-    @Override
-    public Retorno actualizarCamino(String codigoEstacionOrigen, String codigoEstacionDestino,
-                                    int identificadorConexion, double costo, double tiempo,
-                                    double kilometros, EstadoCamino estadoDelCamino) {
-        return Retorno.noImplementada();
-    }
-
-    @Override
-    public Retorno listadoEstacionesCantTrasbordos(String codigo, int cantidad) {
-        return Retorno.noImplementada();
-    }
-
-    @Override
-    public Retorno viajeCostoMinimoKilometros(String codigoEstacionOrigen, String codigoEstacionDestino) {
-        return Retorno.noImplementada();
-    }
-
-    @Override
-    public Retorno viajeCostoMinimoEuros(String codigoEstacionOrigen, String codigoEstacionDestino) {
-        return null;
-    }
-
-}
Index: obligatorio-ae2-mar23-tests-v2/.idea/modules.xml
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/.idea/modules.xml b/obligatorio-ae2-mar23-tests-v2/.idea/modules.xml
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/.idea/modules.xml	
+++ /dev/null	
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/src/main/main.iml" filepath="$PROJECT_DIR$/src/main/main.iml" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/obligatorio-ae2-mar23-tests-v2.iml" filepath="$PROJECT_DIR$/.idea/obligatorio-ae2-mar23-tests-v2.iml" />
-      <module fileurl="file://$PROJECT_DIR$/src/test/test.iml" filepath="$PROJECT_DIR$/src/test/test.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/.idea/google-java-format.xml
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/.idea/google-java-format.xml b/obligatorio-ae2-mar23-tests-v2/.idea/google-java-format.xml
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/.idea/google-java-format.xml	
+++ /dev/null	
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="GoogleJavaFormatSettings">
-    <option name="enabled" value="false" />
-  </component>
-</project>
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestSistemaAFuturo.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestSistemaAFuturo.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestSistemaAFuturo.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestSistemaAFuturo.java	
+++ /dev/null	
@@ -1,16 +0,0 @@
-package sistema;
-
-import interfaz.Retorno;
-import interfaz.Sistema;
-import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.Test;
-
-public class TestSistemaAFuturo {
-
-  @Test
-  public void testAFuturo(){
-    Sistema s=new ImplementacionSistema();
-    Assertions.assertEquals(Retorno.ok(),s.inicializarSistema(500));
-  }
-
-}
Index: obligatorio-ae2-mar23-tests-v2/.idea/obligatorio-ae2-mar23-tests-v2.iml
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/.idea/obligatorio-ae2-mar23-tests-v2.iml b/obligatorio-ae2-mar23-tests-v2/.idea/obligatorio-ae2-mar23-tests-v2.iml
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/.idea/obligatorio-ae2-mar23-tests-v2.iml	
+++ /dev/null	
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$" />
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxAccionesEstaciones.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxAccionesEstaciones.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxAccionesEstaciones.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxAccionesEstaciones.java	
+++ /dev/null	
@@ -1,41 +0,0 @@
-package sistema;
-
-import interfaz.*;
-
-import static sistema.AuxAsserciones.checkearOk;
-
-public class AuxAccionesEstaciones {
-
-    private static String copy(String txt) {
-        return new String(txt);
-    }
-
-    public static Retorno registroEstacion(Sistema sistema, AuxTestClaseEstacionNoUsar estacion) {
-        return sistema.registrarEstacionDeTren(estacion.getCodigo(), estacion.getNombre());
-    }
-
-    public static void registroEstacionOk(Sistema sistema, AuxTestClaseEstacionNoUsar... estaciones) {
-        for (AuxTestClaseEstacionNoUsar estacion : estaciones) {
-            checkearOk(sistema.registrarEstacionDeTren(copy(estacion.getCodigo()), copy(estacion.getNombre())), "La estacion debia de haberse registrado correctamente");
-        }
-    }
-
-    public static void registrarConexionesOk(Sistema sistema, AuxTestConexionNoUsar... conexionNoUsar) {
-
-        for (AuxTestConexionNoUsar conn : conexionNoUsar) {
-            checkearOk(sistema.registrarConexion(copy(conn.getCodOrig()), copy(conn.getCodDest()), conn.getId(), conn.getCosto(), conn.getTiempo(), conn.getKilometros(), conn.getEstado()),
-                    String.format("La conexion [%s,%s] debia de haberse registrado correctamente", conn.getCodOrig(), conn.getCodDest()));
-        }
-
-    }
-
-    public static void actualizarConexionesOk(Sistema sistema, AuxTestConexionNoUsar... conexionNoUsar) {
-
-        for (AuxTestConexionNoUsar conn : conexionNoUsar) {
-            checkearOk(sistema.actualizarCamino(copy(conn.getCodOrig()), copy(conn.getCodDest()), conn.getId(), conn.getCosto(), conn.getTiempo(), conn.getKilometros(), conn.getEstado()),
-                    "La conexion debia de haberse actualizado correctamente");
-        }
-
-    }
-
-}
Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestUtil.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestUtil.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestUtil.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestUtil.java	
+++ /dev/null	
@@ -1,69 +0,0 @@
-package sistema;
-
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.Random;
-
-public class TestUtil {
-    /**
-     * No les va a servir, la burbuja tiene O(n^2).Ordena in place con burbuja.
-     */
-    public static <T> T[] ordenar(T[] original, Comparator<T> comparator) {
-        if (original == null) {
-            return null;
-        }
-        T[] ordenar = Arrays.copyOf(original, original.length);
-        for (int i = 0; i < ordenar.length; i++) {
-            for (int j = 0; j < (ordenar.length - i - 1); j++) {
-                if (comparator.compare(ordenar[j], ordenar[j + 1]) > 0) {
-                    T aux = ordenar[j];
-                    ordenar[j] = ordenar[j + 1];
-                    ordenar[j + 1] = aux;
-                }
-            }
-        }
-        return ordenar;
-    }
-
-    public static <T extends Comparable<T>> T[] ordenar(T[] ordenar) {
-        return ordenar(ordenar, Comparator.naturalOrder());
-    }
-
-    public static <T> T[] shuffle(T[] original, Random r) {
-
-        if (original == null) {
-            return null;
-        }
-        T[] shuffle = Arrays.copyOf(original, original.length);
-        int shuffleQty = Math.max(0, Math.min(original.length, (int) (r.nextDouble() * original.length / 4 + original.length / 2)));
-        for (int i = 0; i < shuffleQty; i++) {
-            int start = Math.min(original.length - 1, (int) (r.nextDouble() * original.length));
-            int end = Math.min(original.length - 1, (int) (r.nextDouble() * original.length));
-            T aux = shuffle[start];
-            shuffle[start] = shuffle[end];
-            shuffle[end] = aux;
-        }
-        return shuffle;
-
-    }
-
-    public static <T> String arrToString(T[] valores) {
-        if (valores == null) {
-            return "";
-        }
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < valores.length; i++) {
-            if (sb.length() > 0) {
-                sb.append("|");
-            }
-            sb.append(valores[i]);
-        }
-        return sb.toString();
-    }
-
-    public static void main(String[] args) {
-
-        System.out.println(Arrays.toString(ordenar(new Integer[]{5, 2, 1, 8, 23, 1, 11, 32, -1, -5})));
-
-    }
-}
Index: obligatorio-ae2-mar23-tests-v2/.idea/checkstyle-idea.xml
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/.idea/checkstyle-idea.xml b/obligatorio-ae2-mar23-tests-v2/.idea/checkstyle-idea.xml
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/.idea/checkstyle-idea.xml	
+++ /dev/null	
@@ -1,15 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="CheckStyle-IDEA" serialisationVersion="2">
-    <checkstyleVersion>10.10.0</checkstyleVersion>
-    <scanScope>JavaOnly</scanScope>
-    <option name="thirdPartyClasspath" />
-    <option name="activeLocationIds" />
-    <option name="locations">
-      <list>
-        <ConfigurationLocation id="bundled-sun-checks" type="BUNDLED" scope="All" description="Sun Checks">(bundled)</ConfigurationLocation>
-        <ConfigurationLocation id="bundled-google-checks" type="BUNDLED" scope="All" description="Google Checks">(bundled)</ConfigurationLocation>
-      </list>
-    </option>
-  </component>
-</project>
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestPasajeros.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestPasajeros.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestPasajeros.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestPasajeros.java	
+++ /dev/null	
@@ -1,281 +0,0 @@
-package sistema;
-
-import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.Test;
-
-import java.util.Comparator;
-import java.util.Random;
-import interfaz.*;
-
-import static sistema.AuxAccionesPasajeros.agregoUnPasajeroValidoConElMismoId;
-import static sistema.AuxAccionesPasajeros.seAgregoCorrectamenteUnPasajeroValido;
-import static sistema.AuxAsserciones.checkearError;
-import static sistema.AuxAsserciones.checkearOk;
-import static sistema.AuxTestPasajeroNoUsar.getIdentificadorValido;
-import static sistema.AuxTestPasajeroNoUsar.pasajero;
-import static sistema.TestUtil.*;
-import static interfaz.Retorno.Resultado.*;
-
-/**********************************************************
- ************************ ERRORES COMUNES *****************
- * Cosas que pueden estarles pasando y que haga que los tests no funcionen
- * Orden lexicografico en vez de númerico
- * Usar '==' en vez de equals
- * Tener invertido el comparator
- * Usar attributos de clase para las agregaciones, que funcionen los test no quita que esto este mal. Lo mejor es usar attributos o objetos creados para esa llamada como por ejemplo un StringBuilder.
- * Mal manejo de los pipes, es mas facil hacer un prepend del pipe (agregarlo al principio) que un append la mayoría de las veces.
- **********************************************************/
-public class TestPasajeros {
-
-    private static final String IDENTIFICADOR_VALIDO = getIdentificadorValido(Nacionalidad.Alemania, 1_234_567_8);
-
-    private static final String[][] IDENTIFICADORES_INVALIDOS_CON_MENSAJE_ERROR = new String[][]{
-            {"CH123.456#2", "La nacionalidad es invalida"},
-            {"123.456#2", "La nacionalidad no esta"},
-            {"FR123.456-2", "El caracter # no esta"},
-            {"FR123#456#2", "En vez de punto hay un # (acuerdense que el punto en las regexp hay que 'escapearlo')"},
-            {"FR123....456#2", "Hay muchos puntos"},
-            {"FR023.456#2", "Empieza en 0"},
-            {"FR0.123.456#2", "Empieza en 0"},
-            {"FR123222#2", "No es valido"},
-            {"bla bla bla", "No es valido"},
-            {"FRA@#!@!@!$CXXSAAQW!", "No es valido"},
-            {"PEPWEWW--ew" + IDENTIFICADOR_VALIDO, "Si falla seguramente falte el pedirle a la regexp que empieze con lo que le piden"},
-            {IDENTIFICADOR_VALIDO + "323232dsd", "Se olvidaron de pedirle a la regexp que termine (por defecto caputra contains no que matchee todo)"},
-    };
-
-    private static final AuxTestPasajeroNoUsar[] PASAJEROS_VALIDOS = new AuxTestPasajeroNoUsar[]{
-            pasajero(Nacionalidad.Alemania, 1_232_222_2, "Jorgen", 23, 0),
-            pasajero(Nacionalidad.Espania, 2_223_222_2, "Raul", 52, 1),
-            pasajero(Nacionalidad.Francia, 223_222_2, "Amelie", 17, 1),
-            pasajero(Nacionalidad.ReinoUnido, 5_555_555_3, "Catherine", 43, 2),
-            pasajero(Nacionalidad.Otro, 301_101_0, "Ian", 22, 2),
-            pasajero(Nacionalidad.Otro, 332_222_2, "George", 23, 3),
-            pasajero(Nacionalidad.Otro, 335_222_2, "George", 23, 4),
-            pasajero(Nacionalidad.Otro, 101_111_2, "Robert", 23, 2)
-    };
-
-    @Test
-    public void testRegistrarOk() {
-        //dado que
-        Sistema sis = tengoUnSistemaValido();
-
-        //registro varios pasajeros y chequeo que todos sean correctos
-
-        int indice = 0;
-        //podriamos haber hecho un for pero lo hacemos manual porque así pueden depurar más facilmente
-        //0
-        Retorno resultado = sis.registrarPasajero(PASAJEROS_VALIDOS[indice].getIdentificador(), PASAJEROS_VALIDOS[indice].getNombre(), PASAJEROS_VALIDOS[indice++].getEdad());
-        checkearOk(resultado, "El pasajero deberia haberse registrado correctamente");
-        //1
-        resultado = sis.registrarPasajero(PASAJEROS_VALIDOS[indice].getIdentificador(), PASAJEROS_VALIDOS[indice].getNombre(), PASAJEROS_VALIDOS[indice++].getEdad());
-        checkearOk(resultado, "El pasajero deberia haberse registrado correctamente");
-        //2
-        resultado = sis.registrarPasajero(PASAJEROS_VALIDOS[indice].getIdentificador(), PASAJEROS_VALIDOS[indice].getNombre(), PASAJEROS_VALIDOS[indice++].getEdad());
-        checkearOk(resultado, "El pasajero deberia haberse registrado correctamente");
-        //3
-        resultado = sis.registrarPasajero(PASAJEROS_VALIDOS[indice].getIdentificador(), PASAJEROS_VALIDOS[indice].getNombre(), PASAJEROS_VALIDOS[indice++].getEdad());
-        checkearOk(resultado, "El pasajero deberia haberse registrado correctamente");
-        //4
-        resultado = sis.registrarPasajero(PASAJEROS_VALIDOS[indice].getIdentificador(), PASAJEROS_VALIDOS[indice].getNombre(), PASAJEROS_VALIDOS[indice++].getEdad());
-        checkearOk(resultado, "El pasajero deberia haberse registrado correctamente");
-
-        //5
-        resultado = sis.registrarPasajero(PASAJEROS_VALIDOS[indice].getIdentificador(), PASAJEROS_VALIDOS[indice].getNombre(), PASAJEROS_VALIDOS[indice++].getEdad());
-        checkearOk(resultado, "El pasajero deberia haberse registrado correctamente");
-    }
-
-    @Test
-    public void testRegistrarVaciosONulosError() {
-        //dado que
-        Sistema sis = tengoUnSistemaValido();
-        //cuando quiero
-        Retorno resultado = sis.registrarPasajero(null, "Un nombre", 23);
-        checkearError(ERROR_1, resultado, "El id es nullo por lo que el error es 1");
-
-        //cuando quiero
-        resultado = sis.registrarPasajero("", "Un nombre", 23);
-        checkearError(ERROR_1, resultado, "El id es vacio por lo que el error es 1");
-
-        //cuando quiero
-        resultado = sis.registrarPasajero(IDENTIFICADOR_VALIDO, null, 23);
-        checkearError(ERROR_1, resultado, "El nombre es nulo por lo que el error es 1");
-        //cuando quiero
-        resultado = sis.registrarPasajero(IDENTIFICADOR_VALIDO, "", 23);
-        checkearError(ERROR_1, resultado, "El nombre es vacio por lo que el error es 1");
-        //cuando quiero
-        resultado = sis.registrarPasajero(IDENTIFICADOR_VALIDO, "nombre valido", 23);
-        checkearOk(resultado, "Deberia poder agregarlo si es valido");
-    }
-
-    @Test
-    public void testRegistrarIdentificadoresInvalidosError() {
-        //dado que
-        Sistema sis = tengoUnSistemaValido();
-        //cuando quiero
-        for (String[] invalidos : IDENTIFICADORES_INVALIDOS_CON_MENSAJE_ERROR) {
-
-            Retorno resultado = sis.registrarPasajero(invalidos[0], "Un nombre valido", 23);
-            AuxAsserciones.checkearError(ERROR_2, resultado, invalidos[1]);
-        }
-
-        //chequeamos que el sistema no haya quedado inestable
-        Retorno resultado = sis.registrarPasajero(IDENTIFICADOR_VALIDO, "nombre valido", 23);
-        checkearOk(resultado, "Deberia poder agregarlo si es valido");
-    }
-
-    @Test
-    public void testearAgregarRepetidosError() {
-        //dado que
-        Sistema sis = tengoUnSistemaValido();
-        seAgregoCorrectamenteUnPasajeroValido(sis, Nacionalidad.Alemania, 1_232_222_2, "Jorgen", 23);
-        seAgregoCorrectamenteUnPasajeroValido(sis, Nacionalidad.Francia, 232_222_2, "Roberto", 15);
-        seAgregoCorrectamenteUnPasajeroValido(sis, Nacionalidad.Otro, 332_222_2, "Ramon", 12);
-        //cuando quiero
-        Retorno resultado = agregoUnPasajeroValidoConElMismoId(sis, getIdentificadorValido(Nacionalidad.Francia, 232_222_2), "2323", 12);
-        //entonces espero
-        checkearError(ERROR_3, resultado);
-        //Para nosotros tambien un pasajero es duplicado aunque tenga la misma nacionalidad pero diferente numero.
-        resultado = agregoUnPasajeroValidoConElMismoId(sis, getIdentificadorValido(Nacionalidad.Alemania, 232_222_2), "2323", 12);
-        checkearError(ERROR_3, resultado);
-    }
-
-
-    @Test
-    public void testBuscarPasajeroOk() {
-        Sistema sis = tengoUnSistemaConPasajerosValidosRegistrados();
-        for (AuxTestPasajeroNoUsar datosPasajero : PASAJEROS_VALIDOS) {
-            Retorno resultado = sis.buscarPasajero(datosPasajero.getIdentificador());
-            AuxAsserciones.checkearOk(resultado, datosPasajero.toString(), "El pasajero no fue encontrado correctamente");
-            Assertions.assertEquals(datosPasajero.getProfundidadEsperada(), resultado.getValorInteger(), "La profundidad no es la esperada");
-        }
-    }
-
-    @Test
-    public void testAscendenteOk() {
-        Sistema sis = tengoUnSistemaConPasajerosValidosRegistrados();
-
-        Assertions.assertEquals(
-                arrToString(ordenar(PASAJEROS_VALIDOS, Comparator.comparingInt(p -> p.getNumeroId()))),
-                sis.listarPasajerosAscendente().getValorString(),
-                "Error con la lista");
-        Random r = new Random(1_424_2322);
-        sis = tengoUnSistemaValido();
-        for (AuxTestPasajeroNoUsar p : shuffle(PASAJEROS_VALIDOS, r)) {
-            seAgregoCorrectamenteUnPasajeroValido(sis, p.getNacionalidad(), p.getNumeroId(), p.getNombre(), p.getEdad());
-        }
-        Assertions.assertEquals(
-                arrToString(ordenar(PASAJEROS_VALIDOS, Comparator.comparingInt(p -> p.getNumeroId()))),
-                sis.listarPasajerosAscendente().getValorString(),
-                "Error con la lista, probablemente tengan un estado intermedio o este mal el agregado en el arbol");
-    }
-
-    @Test
-    public void testDescendenteOk() {
-        Sistema sis = tengoUnSistemaConPasajerosValidosRegistrados();
-
-        Assertions.assertEquals(
-                arrToString(ordenar(PASAJEROS_VALIDOS, Comparator.<AuxTestPasajeroNoUsar>comparingInt(p -> p.getNumeroId()).reversed())),
-                sis.listarPasajerosDescendente().getValorString(),
-                "Error con la lista");
-        Random r = new Random(1_424_2322);
-        sis = tengoUnSistemaValido();
-        for (AuxTestPasajeroNoUsar p : shuffle(PASAJEROS_VALIDOS, r)) {
-            seAgregoCorrectamenteUnPasajeroValido(sis, p.getNacionalidad(), p.getNumeroId(), p.getNombre(), p.getEdad());
-        }
-        Assertions.assertEquals(
-                arrToString(ordenar(PASAJEROS_VALIDOS, Comparator.<AuxTestPasajeroNoUsar>comparingInt(p -> p.getNumeroId()).reversed())),
-                sis.listarPasajerosDescendente().getValorString(),
-                "Error con la lista, probablemente tengan un estado intermedio o este mal el agregado en el arbol");
-        sis.inicializarSistema(42);//ojo con el reinicio
-
-        Assertions.assertEquals(
-                "",
-                sis.listarPasajerosDescendente().getValorString(),
-                "Error con la lista, probablemente tengan un estado intermedio o este mal el agregado en el arbol");
-    }
-
-    @Test
-    public void testPasajerosNacionalidad() {
-        Sistema sis = tengoUnSistemaConPasajerosValidosRegistrados();
-        String resultado = checkearOk(sis.listarPasajerosPorNacionalidad(Nacionalidad.Alemania), "Deberia haber funcionado").getValorString();
-
-        Assertions.assertFalse(resultado.endsWith("|"), "No puede terminar con pipe");
-
-        AuxTestPasajeroNoUsar[] pasajerosAlemanes = new AuxTestPasajeroNoUsar[]{
-                pasajero(Nacionalidad.Alemania, 1_232_222_2, "Jorgen", 23, 0),
-
-        };
-        chequearListaNacionalidadesCoinciden(resultado, pasajerosAlemanes);
-
-        AuxTestPasajeroNoUsar[] pasajerosConOtraNacionalidad = new AuxTestPasajeroNoUsar[]{
-                pasajero(Nacionalidad.Otro, 301_101_0, "Ian", 22, 2),
-                pasajero(Nacionalidad.Otro, 332_222_2, "George", 23, 3),
-                pasajero(Nacionalidad.Otro, 335_222_2, "George", 23, 4),
-                pasajero(Nacionalidad.Otro, 101_111_2, "Robert", 23, 2)
-        };
-        resultado = checkearOk(sis.listarPasajerosPorNacionalidad(Nacionalidad.Otro), "Deberia haber funcionado").getValorString();
-        chequearListaNacionalidadesCoinciden(resultado, pasajerosConOtraNacionalidad);
-    }
-
-    private static void chequearListaNacionalidadesCoinciden(String resultado, AuxTestPasajeroNoUsar[] pasajerosEsperados) {
-        String[] infoPasajeros = resultado.split("[|]");
-        Assertions.assertEquals(pasajerosEsperados.length, infoPasajeros.length, "Las listas tienen que tener el mismo largo");
-        for (int i = 0; i < pasajerosEsperados.length; i++) {
-            Assertions.assertTrue(resultado.contains(pasajerosEsperados[i].getIdentificador() + ";"),
-                    "Esperabamos que estuviera el pasajero '" + pasajerosEsperados[i] + "' en la lista de salida");
-            boolean existeElResultadoEnLosEsperados = false;
-            String idABuscar = infoPasajeros[i].split(";")[0];
-            for (int j = 0; j < pasajerosEsperados.length; j++) {
-                if (idABuscar.equals(pasajerosEsperados[j].getIdentificador())) {
-                    existeElResultadoEnLosEsperados = true;
-                    break;
-                }
-            }
-            Assertions.assertTrue(existeElResultadoEnLosEsperados, "El pasajero de la salida '" + infoPasajeros[i] + "', no esta en los esperados");
-        }
-    }
-
-    @Test
-    public void testBuscarPasajeroIdentificadorNoValidoError() {
-        Sistema sis = tengoUnSistemaConPasajerosValidosRegistrados();
-        Retorno resultado = sis.buscarPasajero(null);
-        AuxAsserciones.checkearError(ERROR_1, resultado, "El identificador es nulo");
-
-        resultado = sis.buscarPasajero("");
-        AuxAsserciones.checkearError(ERROR_1, resultado, "El identificador es vacío");
-        for (String[] idInvalido : IDENTIFICADORES_INVALIDOS_CON_MENSAJE_ERROR) {
-            resultado = sis.buscarPasajero(idInvalido[0]);
-            AuxAsserciones.checkearError(ERROR_1, resultado, "El identificador es invalido: " + idInvalido[1]);
-        }
-    }
-
-    @Test
-    public void testBuscarPasajeroNoEncontradoError() {
-        Sistema sis = tengoUnSistemaConPasajerosValidosRegistrados();
-        Retorno resultado = sis.buscarPasajero(getIdentificadorValido(Nacionalidad.Espania, 7_777_777_7));
-        AuxAsserciones.checkearError(ERROR_2, resultado, "El pasajero no existe por lo que deberia dar el codigo de error esperado");
-    }
-
-
-    private Sistema tengoUnSistemaConPasajerosValidosRegistrados() {
-        Sistema sistema = tengoUnSistemaValido();
-        for (AuxTestPasajeroNoUsar datosPasajero : PASAJEROS_VALIDOS) {
-            checkearOk(sistema.registrarPasajero(copy(datosPasajero.getIdentificador()), copy(datosPasajero.getNombre()), datosPasajero.getEdad()), "Se deberia haber registrado correctamente");
-
-        }
-        return sistema;
-    }
-
-    private Sistema tengoUnSistemaValido() {
-        ImplementacionSistema impl = new ImplementacionSistema();
-        impl.inicializarSistema(20);
-        return impl;
-    }
-
-    private static String copy(String txt) {
-        return new String(txt);
-    }
-
-
-}
Index: obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Sistema.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Sistema.java b/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Sistema.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Sistema.java	
+++ /dev/null	
@@ -1,107 +0,0 @@
-package interfaz;
-
-/**
- * Provee una interfaz para interactuar con el sistema
- */
-public interface Sistema {
-    /**
-     * @param maxEstaciones La cantidad máxima de estaciones.
-     * @return Ok
-     */
-    Retorno inicializarSistema(int maxEstaciones);
-
-
-    /**
-     * Registra el pasajero en el sistema
-     *
-     * @param identificador El identificador del pasajero
-     * @param nombre        El nombre del pasajero
-     */
-    Retorno registrarPasajero(String identificador, String nombre, int edad);
-
-    /**
-     * Nos devuelve los pasajeros que cumplen la condicion especificada en la consulta
-     *
-     * @param consulta La consulta a aplicar
-     */
-    Retorno filtrarPasajeros(Consulta consulta);
-
-    /**
-     * Busca un pasajero en el sistema por cedula
-     *
-     * @param identificador El identificador del pasajero.
-     */
-    Retorno buscarPasajero(String identificador);
-
-    /**
-     * @return Los pasajeros listados por identificador ascendente
-     */
-    Retorno listarPasajerosAscendente();
-
-    /**
-     * @return Los pasajeros listados por identificador descendente
-     */
-    Retorno listarPasajerosDescendente();
-
-    /**
-     * @param nacionalidad La nacionalidad de un pasajero.
-     * @return Los pasajeros de un tipo especifico.
-     */
-    Retorno listarPasajerosPorNacionalidad(Nacionalidad nacionalidad);
-
-    /**
-     * @param codigo El codigo de la estacion a registrar.
-     * @param nombre El nombre de la estacion a registrar.
-     */
-    Retorno registrarEstacionDeTren(String codigo, String nombre);
-
-    ;
-
-    /**
-     * Registra un camino en el sistema
-     *
-     * @param codigoEstacionOrigen  El codigo de la estacion de origen.
-     * @param codigoEstacionDestino El codigo de la estacion de destino.
-     * @param costo                 El costo en euros.
-     * @param tiempo                El tiempo del camino.
-     * @param kilometros            Los kilometros del camino.
-     * @param estadoDeLaConexion    El estado del camino.
-     */
-    Retorno registrarConexion(String codigoEstacionOrigen, String codigoEstacionDestino, int identificadorConexion,
-                              double costo, double tiempo, double kilometros, EstadoCamino estadoDeLaConexion);
-
-    /**
-     * Actualiza un camino en el sistema.
-     *
-     * @param codigoEstacionOrigen  El codigo de la estacion de origen.
-     * @param codigoEstacionDestino El codigo de la estacion de destino.
-     * @param costo                 El costo en euros del camino.
-     * @param tiempo                El tiempo del camino.
-     * @param kilometros            Los kilometros del camino.
-     * @param estadoDelCamino       El estado del camino.
-     */
-    Retorno actualizarCamino(String codigoEstacionOrigen, String codigoEstacionDestino, int identificadorConexion,
-                             double costo, double tiempo, double kilometros, EstadoCamino estadoDelCamino);
-
-    /**
-     * @param codigo   El codigo de la estacion de origen.
-     * @param cantidad La cantidad de saltos maxima
-     * @return Las estaciones a las que puede llegar con hasta cantidad de trasbordos.
-     */
-    Retorno listadoEstacionesCantTrasbordos(String codigo, int cantidad);
-
-    /**
-     * @param codigoEstacionOrigen  El codigo de la estacion de origen.
-     * @param codigoEstacionDestino El codigo de la estacion de destino.
-     * @return El camino si lo hay entre el origen y el destino con los menores kilometros posibles
-     */
-    Retorno viajeCostoMinimoKilometros(String codigoEstacionOrigen, String codigoEstacionDestino);
-
-    /**
-     * @param codigoEstacionOrigen  El codigo de la estacion de origen.
-     * @param codigoEstacionDestino El codigo de la estacion de destino.
-     * @return El camino si lo hay entre el origen y el destino con el menor costo en euros posible
-     */
-    Retorno viajeCostoMinimoEuros(String codigoEstacionOrigen, String codigoEstacionDestino);
-
-}
Index: obligatorio-ae2-mar23-tests-v2/.idea/uiDesigner.xml
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/.idea/uiDesigner.xml b/obligatorio-ae2-mar23-tests-v2/.idea/uiDesigner.xml
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/.idea/uiDesigner.xml	
+++ /dev/null	
@@ -1,124 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Palette2">
-    <group name="Swing">
-      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
-      </item>
-      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
-        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
-        <initial-values>
-          <property name="text" value="Button" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="RadioButton" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="CheckBox" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="Label" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
-          <preferred-size width="-1" height="20" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
-      </item>
-    </group>
-  </component>
-</project>
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/package-info.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/package-info.java b/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/package-info.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/package-info.java	
+++ /dev/null	
@@ -1,4 +0,0 @@
-/**
- * Ninguna de las clase de aquí pueden ser modificadas
- */
-package interfaz;
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/EstadoCamino.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/EstadoCamino.java b/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/EstadoCamino.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/EstadoCamino.java	
+++ /dev/null	
@@ -1,7 +0,0 @@
-package interfaz;
-
-public enum EstadoCamino {
-    MALO,
-    BUENO,
-    EXCELENTE
-}
Index: obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Consulta.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Consulta.java b/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Consulta.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Consulta.java	
+++ /dev/null	
@@ -1,464 +0,0 @@
-package interfaz;
-
-import java.util.Objects;
-import java.util.logging.Logger;
-
-/**
- * Esta clase abstrae una consulta
- */
-public class Consulta {
-    private static final Logger LOGGER = Logger.getLogger(Consulta.class.getName());
-    /**
-     * La raiz de la consulta
-     */
-    private NodoConsulta raiz;
-
-    private Consulta(NodoConsulta raiz) {
-        Objects.requireNonNull(raiz);
-        this.raiz = raiz;
-    }
-
-    public NodoConsulta getRaiz() {
-        return this.raiz;
-    }
-
-    public enum TipoNodoConsulta {
-        And("AND", ' ', false),
-        Or("OR", ' ', false),
-        EdadMayor("edad", '>', true),
-        NombreIgual("nombre", '=', false),
-        Nacionalidad("nacionalidad", '=', false);
-        private String valorStr;
-        private char simboloEsperado;
-        private boolean esNumerico;
-
-        TipoNodoConsulta(String valorStr, char simboloEsperado, boolean esNumerico) {
-            this.valorStr = valorStr;
-            this.simboloEsperado = simboloEsperado;
-            this.esNumerico = esNumerico;
-        }
-    }
-
-
-    public static class NodoConsulta {
-        private final TipoNodoConsulta tipoNodoConsulta;
-        private final int valorInt;//se usa para la consulta de edad
-        private final String valorString; //se usa para la consulta de nombre
-
-        private final Nacionalidad valorNacionalidad; //se usa para la consulta de nacionalidad
-        private final NodoConsulta izq;
-        private final NodoConsulta der;
-
-        public NodoConsulta(final TipoNodoConsulta tipoNodoConsulta,
-            final int valorInt,
-            final String valorString,
-            final Nacionalidad valorNacionalidad,
-            final NodoConsulta izq,
-            final NodoConsulta der) {
-            this.tipoNodoConsulta = tipoNodoConsulta;
-            this.valorInt = valorInt;
-            this.valorString = valorString;
-            this.izq = izq;
-            this.der = der;
-            this.valorNacionalidad = valorNacionalidad;
-        }
-
-        public NodoConsulta(final TipoNodoConsulta tipoNodoConsulta,
-            final NodoConsulta izq,
-            final NodoConsulta der) {
-            this.tipoNodoConsulta = tipoNodoConsulta;
-            this.izq = izq;
-            this.der = der;
-            valorInt = 0;
-            valorNacionalidad = null;
-            valorString = "";
-        }
-
-        public TipoNodoConsulta getTipoNodoConsulta() {
-            return tipoNodoConsulta;
-        }
-
-        public int getValorInt() {
-            return valorInt;
-        }
-
-        public String getValorString() {
-            return valorString;
-        }
-
-        public Nacionalidad getValorNacionalidad() {
-            return valorNacionalidad;
-        }
-
-        public NodoConsulta getIzq() {
-            return izq;
-        }
-
-        public NodoConsulta getDer() {
-            return der;
-        }
-    }
-
-    public Consulta or(Consulta consulta) {
-        return or(this, consulta);
-    }
-
-    public Consulta and(Consulta consulta) {
-        return and(this, consulta);
-    }
-
-    public static Consulta and(Consulta c1,
-        Consulta c2) {
-        return new Consulta(new NodoConsulta(TipoNodoConsulta.And, 0, "", null, c1.raiz, c2.raiz));
-    }
-
-    public static Consulta or(Consulta c1,
-        Consulta c2) {
-        return new Consulta(new NodoConsulta(TipoNodoConsulta.Or, 0, "", null, c1.raiz, c2.raiz));
-    }
-
-    public static Consulta edadMayor(int valor) {
-        return new Consulta(new NodoConsulta(TipoNodoConsulta.EdadMayor, valor, "", null, null, null));
-    }
-
-    public static Consulta nacionalidadIgual(Nacionalidad nacionalidad) {
-        return new Consulta(new NodoConsulta(TipoNodoConsulta.Nacionalidad, 0, null,
-            Objects.requireNonNull(nacionalidad), null, null));
-    }
-
-    public static Consulta nombreIgual(String nombre) {
-        return new Consulta(new NodoConsulta(TipoNodoConsulta.NombreIgual, 0, Objects.requireNonNull(nombre),
-            null, null, null));
-    }
-
-    public String toUrl() {
-        StringBuilder sb = new StringBuilder("digraph G{\n");
-        toUrl(raiz, null, sb, "R");
-        sb.append("}");
-        return String.format("https://dreampuf.github.io/GraphvizOnline/#%s",
-            sb.toString().replace("\n", "%0A")
-                .replace(" ", "%20")
-                .replace("#", "%232")
-                .replace("\"", "%22")
-                .replace("{", "%7B")
-                .replace("}", "%7D")
-                .replace("[", "%5B")
-                .replace("]", "%5D")
-                .replace("=", "%3D")
-                .replace("-", "%2D")
-                .replace("_", "%5F")
-                .replace(">", "%3E")
-                .replace(";", "%3B"));
-    }
-
-    private void toUrl(NodoConsulta nodo, String nombrePadre, StringBuilder sb, String prefix) {
-        if (nodo != null) {
-            switch (nodo.tipoNodoConsulta) {
-                case Or:
-                case And:
-                    sb.append(String.format("%s [label=\"%s\"];\n", prefix, nodo.tipoNodoConsulta));
-                    break;
-                case EdadMayor:
-                    sb.append(String.format("%s [label=\"%s [%s]\"];\n", prefix, nodo.tipoNodoConsulta, nodo.valorInt));
-                    break;
-                case NombreIgual:
-                    sb.append(String.format("%s [label=\"%s [%s]\"];\n", prefix, nodo.tipoNodoConsulta, nodo.valorString));
-                    break;
-                case Nacionalidad:
-                    sb.append(String.format("%s [label=\"%s [%s]\"];\n", prefix, nodo.tipoNodoConsulta, nodo.valorNacionalidad));
-                    break;
-                default:
-                    sb.append(String.format("%s [label=\"%s\"];\n", prefix, nodo.tipoNodoConsulta));
-                    break;
-            }
-            if (nombrePadre != null) {
-                sb.append(String.format("%s -> %s;\n", nombrePadre, prefix));
-            }
-            toUrl(nodo.izq, prefix, sb, prefix + "_L");
-            toUrl(nodo.der, prefix, sb, prefix + "_R");
-        }
-    }
-
-    @Override
-    public String toString() {
-        return toString(raiz);
-    }
-
-    private String toString(final NodoConsulta nodo) {
-        if (nodo == null) {
-            return "";
-        }
-        if (nodo.tipoNodoConsulta == TipoNodoConsulta.And || nodo.tipoNodoConsulta == TipoNodoConsulta.Or) {
-
-            return String.format("[%s] %s [%s]", toString(nodo.izq), nodo.tipoNodoConsulta, toString(nodo.der));
-        } else if (nodo.tipoNodoConsulta == TipoNodoConsulta.EdadMayor) {
-            return String.format("edad > %s", nodo.valorInt);
-        } else if (nodo.tipoNodoConsulta == TipoNodoConsulta.Nacionalidad) {
-            return String.format("nacionalidad = '%s'", nodo.valorNacionalidad.getCodigo());
-        } else if (nodo.tipoNodoConsulta == TipoNodoConsulta.NombreIgual) {
-            return String.format("nombre = '%s'", nodo.valorString);
-        } else {
-            throw new UnsupportedOperationException("El tipo de nodo no esta reconocido: " + nodo.tipoNodoConsulta);
-        }
-    }
-
-    /*
-     * A PARTIR DE ACA EMPIEZA EL PARSEO DESDE EL TEXTO
-     *
-     */
-
-
-    public static void main(String[] args) {
-        //Vamos subiendo la complejidad
-        System.out.println(Consulta.fromString("edad > 10 OR nacionalidad = 'OT'"));
-
-        System.out.println(Consulta.fromString("[edad >10] AND [nacionalidad ='DE' AND nacionalidad='ES']"));
-        System.out.println(Consulta.fromString("[[[[[edad>10]]]] AND [nombre='pepe']]"));
-        System.out.println(Consulta.fromString("'pepe'=nombre"));
-        System.out.println(Consulta.fromString("[[edad>12 AND nacionalidad='ES' AND nombre='Roberto'] OR " +
-            "[edad>   14 AND     ['Raul'    =     nombre OR nombre= 'clotilda']]]"));
-
-        //Estas son claramente invalidas
-        System.out.println(Consulta.fromString("[[edad>10] AND nombre='pepe'"));
-        System.out.println(Consulta.fromString("invalida][]"));
-        System.out.println(Consulta.fromString("'pepe'=nombre AND [10>edad] "));
-        System.out.println(Consulta.fromString("[edad>10] nombre='sofia'"));
-    }
-
-    // Metodo publico que llama al recursivo
-    public static Consulta fromString(String consulta) {
-        ResultadoParse<NodoConsulta> resultadoParse = fromStringRec(consulta, null);
-        if (resultadoParse == null) {
-            return null;
-        }
-        if (!resultadoParse.resto.isBlank()) {
-            return null;//NO se pudo consumir todo el string.
-        }
-        return new Consulta(resultadoParse.resultado);
-
-    }
-
-    /*
-    public int sumaAcumularEnParametro(int [] arr){
-     return sumaAcumularEnParametroRec(arr,0,0);
-    }
-    private int sumaAcumularEnParametro(int [] arr,int desde, int suma){
-     if(desde>=arr.length)return suma;
-     else return sumaAcumularEnParametro(arr,desde+1,suma+arr[desde]);
-    }
-     */
-    // El metodo recursivo consume el string hasta llegar al final o hasta lo mas que pueda interpretar
-    // Acumula en el parametro previo el resultado a devolver o el nodo que fue parseado anteriormente, es igual a lo
-    // que vimos con la suma acumulada (ver arriba).
-    // Funciona de la siguiente manera, busca reglas de izquierda a derecha, una vez pudo parsear algo lo saca del
-    // string y le pasa el resto del computo al paso recursivo
-    private static ResultadoParse<NodoConsulta> fromStringRec(String consulta, NodoConsulta previo) {
-        if (consulta.isEmpty()) {
-            //Caso base consumimos todo el string
-            return new ResultadoParse<>(previo, "");
-        } else if (consulta.startsWith("]")) {
-            //caso base consumimos todo lo que habia dentro de los corchetes, notese que devolvemos como
-            // resto el corchete para que el metodo que lo llama valide que haya un corchete que lo abre.
-            return new ResultadoParse<>(previo, consulta);
-        } else if (consulta.startsWith(" ")) {
-            //Ignoramos cualquier espacio en blanco
-            return fromStringRec(consulta.substring(1), previo);
-        } else if (consulta.startsWith("[")) {
-            //Lo que pasa despues del corchete, tiene que ser una regla valida
-            //El resto tiene que empezar por un corchete, sino esta mal el resultado
-            ResultadoParse<NodoConsulta> resultadoParentesis = fromStringRec(consulta.substring(1), previo);
-            if (resultadoParentesis == null) {
-                return null;
-            }
-            if (!resultadoParentesis.resto.startsWith("]")) {
-                LOGGER.info("Falto cerrar parentesis en: " + consulta);
-                return null;
-            }
-            return fromStringRec(resultadoParentesis.resto.substring(1), resultadoParentesis.resultado);
-        } else if (consulta.startsWith("AND")) {
-
-            // Ya parseamos una regla previo, vimos un simbolo de and. por lo que tendriamos que unir
-            // el resultado parseado de la derecha con lo previo que teniamos
-            ResultadoParse<NodoConsulta> resultadoDerecha = fromStringRec(consulta.substring("AND".length()), null);
-            if (resultadoDerecha == null || previo == null) {
-                LOGGER.warning("Resultado de AND invalido parseando: " + consulta);
-                return null;
-            }
-            return fromStringRec(resultadoDerecha.resto, new NodoConsulta(TipoNodoConsulta.And, previo,
-                resultadoDerecha.resultado));
-        } else if (consulta.startsWith("OR")) {
-            // Ya parseamos una regla previo, vimos un simbolo de or. por lo que tendriamos que unir
-            // el resultado parseado de la derecha con lo previo que teniamos
-            ResultadoParse<NodoConsulta> resultadoDerecha = fromStringRec(consulta.substring("OR".length()), null);
-            if (resultadoDerecha == null || previo == null) {
-                LOGGER.warning("Resultado de OR invalido parseando: " + consulta);
-                return null;
-            }
-
-            return fromStringRec(resultadoDerecha.resto, new NodoConsulta(TipoNodoConsulta.Or, previo,
-                resultadoDerecha.resultado));
-        } else {
-            // Si no eran reglas compuestas o corchetes, quiere decir que tiene que haber una regla simple.
-            if (previo != null) {
-                // Entre reglas simples siempre tiene que haber un OR/AND, sino como combinamos el resultado
-                // de lo anterior Con algo que es simple?
-                LOGGER.info("Te olvidaste de un AND/OR previo a:" + consulta);
-                return null;
-            }
-            //De las simples tratamos de parsear todas, la primera que no de un vacio es la regla que sirve
-            ResultadoParse<NodoConsulta> reglaSimple =
-                primeroNoNulo(parsearReglaSimple(TipoNodoConsulta.EdadMayor, consulta),
-                    parsearReglaSimple(TipoNodoConsulta.Nacionalidad, consulta),
-                    parsearReglaSimple(TipoNodoConsulta.NombreIgual, consulta));
-
-            if (reglaSimple == null) {
-                //Si no encontramos ninguna regla simple, esta mal el string
-                LOGGER.warning("No pude parsear una regla simple desde: " + consulta);
-                return null;
-            }
-            //Lo que queda es seguir parseando la consulta, sin el texto de la regla simple.
-            return fromStringRec(reglaSimple.resto, reglaSimple.resultado);
-
-        }
-    }
-
-    //Ignora los espacios hasta encontrar la comita, una vez encontrada busca que se cierre dicha comita.
-    private static ResultadoParse<String> parsearValorString(String consulta) {
-        if (consulta.startsWith(" ")) {
-            return parsearValorString(consulta.substring(1));
-        }
-        if (consulta.startsWith("'")) {
-            int idxSiguienteComita = consulta.indexOf('\'', 1);
-            return new ResultadoParse<>(consulta.substring(1, idxSiguienteComita),
-                consulta.substring(idxSiguienteComita + 1));
-        } else {
-            return null;
-        }
-    }
-
-    //  VA a dar algo valido mientras haya un <espacios>numero[cualquierCosa]
-    private static ResultadoParse<Integer> parsearInt(String consulta) {
-
-        if (consulta.startsWith(" ")) {
-            return parsearInt(consulta.substring(1));
-        } else if (Character.isDigit(consulta.charAt(0))) {
-            int valor = 0;
-            int indiceCaracter = 0;
-            while (Character.isDigit(consulta.charAt(indiceCaracter))) {
-                valor = valor * 10 + Integer.parseInt(consulta.charAt(indiceCaracter) + "");
-                indiceCaracter++;
-            }
-            return new ResultadoParse<>(valor,
-                consulta.substring(indiceCaracter));
-        } else {
-            return null;
-        }
-    }
-
-    //Busca que empiece con el nombre de la regla simple que se pasa por parametro,
-    // o que sea <espacios>'texto'<espacios>=<espacios><nombre regla simple>[cualquierCosa]
-    private static ResultadoParse<NodoConsulta> parsearReglaSimple(TipoNodoConsulta tipoEsperado, String consulta) {
-        if (consulta.startsWith(" ")) {
-            return parsearReglaSimple(tipoEsperado, consulta.substring(1));
-        }
-        if (consulta.startsWith(tipoEsperado.valorStr)) {
-
-            int idxInicio = buscarSimbolo(tipoEsperado, consulta.substring(tipoEsperado.valorStr.length()));
-            if (idxInicio < 0) {
-                return null;
-            }
-            idxInicio += tipoEsperado.valorStr.length();
-            if (tipoEsperado.esNumerico) {
-                ResultadoParse<Integer> valorNumerico = parsearInt(consulta.substring(idxInicio + 1));
-                if (valorNumerico == null) {
-                    return null;
-                }
-                return new ResultadoParse<>(new NodoConsulta(tipoEsperado, valorNumerico.resultado, "",
-                    null, null, null), valorNumerico.resto);
-            } else {
-                ResultadoParse<String> texto = parsearValorString(consulta.substring(idxInicio + 1));
-                Nacionalidad nacionalidad = Nacionalidad.fromCodigo(texto.resultado);
-                if (texto.resultado == null) {
-                    return null;
-                } else if (tipoEsperado == TipoNodoConsulta.Nacionalidad && nacionalidad == null) {
-                    return null;
-                }
-                return new ResultadoParse<>(new NodoConsulta(tipoEsperado, 0, texto.resultado, nacionalidad,
-                    null, null),
-                    texto.resto);
-            }
-        } else if (!tipoEsperado.esNumerico) {
-            ResultadoParse<String> texto = parsearValorString(consulta);
-            if (texto != null) {
-
-                Nacionalidad nacionalidad = Nacionalidad.fromCodigo(texto.resultado);
-                if (tipoEsperado == TipoNodoConsulta.Nacionalidad && nacionalidad == null) {
-                    return null;
-                }
-                int idxSimbolo = buscarSimbolo(tipoEsperado, texto.resto);
-                if (idxSimbolo < 0) {
-                    return null;
-                }
-                String restoDespuesSimbolo = texto.resto.substring(idxSimbolo + 1).trim();
-                if (restoDespuesSimbolo.startsWith(tipoEsperado.valorStr)) {
-                    return new ResultadoParse<>(new NodoConsulta(tipoEsperado, 0, texto.resultado, nacionalidad,
-                        null, null), restoDespuesSimbolo.substring(tipoEsperado.valorStr.length()));
-                }
-            } else {
-                return null;
-            }
-        } else {
-            return null;
-        }
-        return null;
-    }
-
-    private static int buscarSimbolo(final TipoNodoConsulta tipoEsperado,
-        final String consulta) {
-        int idxInicio = 0;
-        while (idxInicio < consulta.length() && consulta.charAt(idxInicio) != tipoEsperado.simboloEsperado) {
-            if (consulta.charAt(idxInicio) == ' ') {
-                idxInicio++;
-            } else {
-                LOGGER.info("No pude encontrar el simbolo: " + tipoEsperado.simboloEsperado + " en " + consulta);
-                return -1;
-            }
-
-        }
-        if (idxInicio >= consulta.length()) {
-            LOGGER.info("No pude encontrar el simbolo: " + tipoEsperado.simboloEsperado + " en " + consulta);
-            return -1;
-        }
-        return idxInicio;
-    }
-
-    private static class ResultadoParse<T> {
-        private final String resto;
-        private final T resultado;
-
-        public ResultadoParse(
-            final T resultado,
-            final String resto) {
-            this.resto = resto;
-            this.resultado = resultado;
-        }
-    }
-
-    /**
-     * Retorna el primero no nulo
-     *
-     * @param elems Los valores a ver
-     * @param <T>   El tipo de dichos valores
-     */
-    @SafeVarargs
-    private static <T> T primeroNoNulo(final T... elems) {
-        for (T r : elems
-        ) {
-            if (r != null) {
-                return r;
-            }
-
-        }
-        return null;
-    }
-}
Index: obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Retorno.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Retorno.java b/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Retorno.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/main/java/interfaz/Retorno.java	
+++ /dev/null	
@@ -1,124 +0,0 @@
-package interfaz;
-
-import java.util.Objects;
-
-
-public class Retorno {
-    public enum Resultado {
-        OK, ERROR_1, ERROR_2, ERROR_3, ERROR_4, ERROR_5, ERROR_6, ERROR_7, NO_IMPLEMENTADA
-    }
-
-    private final Resultado resultado;
-    private final Integer valorInteger;
-    private final String valorString;
-
-    private Retorno(Resultado resultado, Integer valorInteger, String valorString) {
-        this.resultado = resultado;
-        this.valorInteger = valorInteger;
-        this.valorString = valorString;
-    }
-
-    public Resultado getResultado() {
-        return resultado;
-    }
-
-    public Integer getValorInteger() {
-        return valorInteger;
-    }
-
-    public String getValorString() {
-        return valorString;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) {
-            return true;
-        }
-        if (o == null || getClass() != o.getClass()) {
-            return false;
-        }
-        Retorno retorno = (Retorno) o;
-        return Objects.equals(valorInteger, retorno.valorInteger)
-                && resultado == retorno.resultado && Objects.equals(valorString, retorno.valorString);
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(resultado, valorInteger, valorString);
-    }
-
-    public static Retorno ok() {
-        return new Retorno(Resultado.OK, null, null);
-    }
-
-    public static Retorno ok(String valorString) {
-        return new Retorno(Resultado.OK, null, valorString);
-    }
-
-    public static Retorno ok(int valorInteger) {
-        return ok(valorInteger, null);
-    }
-
-    public static Retorno ok(int valorInteger, String valorString) {
-        return new Retorno(Resultado.OK, valorInteger, valorString);
-    }
-
-    public static Retorno error(Resultado error, String msg) {
-        return new Retorno(error, 0, msg);
-    }
-
-    public static Retorno error1(String mensaje) {
-        return error(Resultado.ERROR_1, mensaje);
-    }
-
-    public static Retorno error2(String mensaje) {
-        return error(Resultado.ERROR_2, mensaje);
-    }
-
-    public static Retorno error3(String mensaje) {
-        return error(Resultado.ERROR_3, mensaje);
-    }
-
-    public static Retorno error4(String mensaje) {
-        return error(Resultado.ERROR_4, mensaje);
-    }
-
-    public static Retorno error5(String mensaje) {
-        return error(Resultado.ERROR_5, mensaje);
-    }
-
-    public static Retorno error6(String mensaje) {
-        return error(Resultado.ERROR_6, mensaje);
-    }
-
-    public static Retorno error7(String mensaje) {
-        return error(Resultado.ERROR_7, mensaje);
-    }
-
-    public static Retorno noImplementada() {
-        return new Retorno(Resultado.NO_IMPLEMENTADA, 0, "");
-    }
-
-    public boolean isOk() {
-        return this.resultado == Resultado.OK;
-    }
-
-    @Override
-    public String toString() {
-        if (this.resultado == Resultado.OK) {
-            if (this.valorString != null && valorInteger != null) {
-                return String.format("OK[%s,'%s']", valorInteger, valorString);
-            } else if (valorString != null) {
-                return String.format("OK['%s']", valorString);
-            } else if (valorInteger != null) {
-                return String.format("OK[%s]", valorInteger);
-            } else {
-                return "OK";
-            }
-        } else if (resultado == Resultado.NO_IMPLEMENTADA) {
-            return resultado.name();
-        }
-        return String.format("%s['%s']", resultado.name(), valorString);
-    }
-}
Index: obligatorio-ae2-mar23-tests-v2/.idea/codeStyles/codeStyleConfig.xml
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/.idea/codeStyles/codeStyleConfig.xml b/obligatorio-ae2-mar23-tests-v2/.idea/codeStyles/codeStyleConfig.xml
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/.idea/codeStyles/codeStyleConfig.xml	
+++ /dev/null	
@@ -1,5 +0,0 @@
-<component name="ProjectCodeStyleConfiguration">
-  <state>
-    <option name="PREFERRED_PROJECT_CODE_STYLE" value="cha cha" />
-  </state>
-</component>
\ No newline at end of file
Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestCaminosMinimosEuros.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestCaminosMinimosEuros.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestCaminosMinimosEuros.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/TestCaminosMinimosEuros.java	
+++ /dev/null	
@@ -1,345 +0,0 @@
-package sistema;
-
-import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.Test;
-
-import java.util.Arrays;
-import java.util.Objects;
-import java.util.Random;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-import static sistema.AuxAccionesEstaciones.registrarConexionesOk;
-import static sistema.AuxAccionesEstaciones.registroEstacionOk;
-import static sistema.AuxAsserciones.checkearError;
-import static sistema.AuxAsserciones.checkearOk;
-import static sistema.AuxTestClaseEstacionNoUsar.estacion;
-import static interfaz.EstadoCamino.*;
-import static interfaz.Retorno.Resultado.*;
-import  interfaz.*;
-
-/**********************************************************
- ************************ ERRORES COMUNES *****************
- * Cosas que pueden estarles pasando y que haga que los tests no funcionen
- * Usar '==' en vez de equals
- * No modelarlos como un multigrafo dirigido, no es lo mismo aristas[a][b] que aristas[b][a]
- * Usar attributos de clase para las agregaciones, que funcionen los test no quita que esto este mal. Lo mejor es usar attributos o objetos creados para esa llamada como por ejemplo un StringBuilder.
- * Mal manejo de los pipes, es mas facil hacer un prepend del pipe (agregarlo al principio) que un append la mayoría de las veces.
- * No darse cuenta que hay lugares donde no podemos explorar en el dijkstra debido a que el grafo no es conexo.
- * Lo anterior puede generar errores de overflow (INTEGER.MAX_VALUE+1 es negativo, porque?)
- * No usar doubles en las distancias
- * Que el máximo de vertices sea 100, no quiere decir que haya 100 vertices
- **********************************************************/
-public class TestCaminosMinimosEuros {
-    private static final String MADRID_1 = "MAD001";
-    private static final String MADRID_2 = "MAD002";
-    private static final String PARIS_1 = "PAR001";
-    private static final String PARIS_2 = "PAR002";
-    private static final String MONTREAL = "MON001";
-    private static final String LYON = "LYO001";
-    private static final String LISBOA = "LIS001";
-    private static final String LONDRES = "LON001";
-
-
-    private static final AuxTestClaseEstacionNoUsar EST_MADRID_1 = estacion(MADRID_1, "MADRID_1");
-    private static final AuxTestClaseEstacionNoUsar EST_MADRID_2 = estacion(MADRID_2, "MADRID_2");
-    private static final AuxTestClaseEstacionNoUsar EST_PARIS_1 = estacion(PARIS_1, "PARIS_1 ");
-    private static final AuxTestClaseEstacionNoUsar EST_PARIS_2 = estacion(PARIS_2, "PARIS_2 ");
-    private static final AuxTestClaseEstacionNoUsar EST_MONTREAL = estacion(MONTREAL, "MONTREAL");
-    private static final AuxTestClaseEstacionNoUsar EST_LYON = estacion(LYON, "LYON ");
-    private static final AuxTestClaseEstacionNoUsar EST_LISBOA = estacion(LISBOA, "LISBOA");
-    private static final AuxTestClaseEstacionNoUsar EST_LONDRES = estacion(LONDRES, "LONDRES ");
-
-    private static final AuxTestConexionNoUsar MADRID_1_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_MADRID_1, 1, 50, 2, 10, EXCELENTE);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_MADRID_2, 2, 25, 1, 5, MALO);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_PARIS_1, 3, 625, 25, 120, MALO);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_PARIS_2, 4, 0, 0, 0, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LISBOA, 5, 650, 26, 145, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LONDRES, 6, 375, 15, 150, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_LYON = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LYON, 7, 1250, 50, 175, MALO);
-    private static final AuxTestConexionNoUsar MADRID_1_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_MONTREAL, 8, 650, 26, 175, MALO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_MADRID_1, 9, 25, 1, 10, MALO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_MADRID_2, 10, 750, 30, 175, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_PARIS_1, 11, 350, 14, 80, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_PARIS_2, 12, 600, 24, 175, MALO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_LISBOA, 13, 550, 22, 75, EXCELENTE);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_LONDRES, 14, 225, 9, 80, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_LYON = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_LYON, 15, 75, 3, 20, BUENO);
-    private static final AuxTestConexionNoUsar MADRID_2_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_MADRID_2, EST_MONTREAL, 16, 200, 8, 60, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_MADRID_1, 17, 650, 26, 95, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_MADRID_2, 18, 625, 25, 170, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_PARIS_1, 19, 900, 36, 190, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_PARIS_2, 20, 525, 21, 75, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_LISBOA, 21, 1325, 53, 185, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_LONDRES, 22, 300, 12, 45, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_LYON = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_LYON, 23, 50, 34, 185, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_1_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_PARIS_1, EST_MONTREAL, 24, 0, 0, 5, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_MADRID_1, 25, 775, 31, 135, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_MADRID_2, 26, 325, 13, 130, MALO);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_PARIS_1, 27, 200, 8, 80, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_PARIS_2, 28, 975, 39, 165, MALO);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_LISBOA, 29, 1025, 41, 140, BUENO);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_LONDRES, 30, 150, 6, 25, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_LYON = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_LYON, 31, 200, 8, 60, EXCELENTE);
-    private static final AuxTestConexionNoUsar PARIS_2_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_PARIS_2, EST_MONTREAL, 32, 75, 3, 30, EXCELENTE);
-    private static final AuxTestConexionNoUsar LISBOA_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_MADRID_1, 33, 425, 17, 105, BUENO);
-    private static final AuxTestConexionNoUsar LISBOA_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_MADRID_2, 34, 700, 28, 115, MALO);
-    private static final AuxTestConexionNoUsar LISBOA_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_PARIS_1, 35, 225, 9, 80, MALO);
-    private static final AuxTestConexionNoUsar LISBOA_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_PARIS_2, 36, 275, 11, 65, BUENO);
-    private static final AuxTestConexionNoUsar LISBOA_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_LISBOA, 37, 125, 5, 30, MALO);
-    private static final AuxTestConexionNoUsar LISBOA_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_LONDRES, 38, 675, 27, 115, EXCELENTE);
-    private static final AuxTestConexionNoUsar LISBOA_TO_LYON = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_LYON, 39, 100, 4, 20, MALO);
-    private static final AuxTestConexionNoUsar LISBOA_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_LISBOA, EST_MONTREAL, 40, 475, 19, 110, EXCELENTE);
-    private static final AuxTestConexionNoUsar LONDRES_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_MADRID_1, 41, 350, 14, 65, EXCELENTE);
-    private static final AuxTestConexionNoUsar LONDRES_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_MADRID_2, 42, 225, 9, 60, MALO);
-    private static final AuxTestConexionNoUsar LONDRES_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_PARIS_1, 43, 75, 3, 20, BUENO);
-    private static final AuxTestConexionNoUsar LONDRES_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_PARIS_2, 44, 1000, 40, 150, BUENO);
-    private static final AuxTestConexionNoUsar LONDRES_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_LISBOA, 45, 200, 8, 85, BUENO);
-    private static final AuxTestConexionNoUsar LONDRES_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_LONDRES, 46, 525, 21, 100, EXCELENTE);
-    private static final AuxTestConexionNoUsar LONDRES_TO_LYON = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_LYON, 47, 100, 4, 40, EXCELENTE);
-    private static final AuxTestConexionNoUsar LONDRES_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_LONDRES, EST_MONTREAL, 48, 1175, 47, 185, MALO);
-    private static final AuxTestConexionNoUsar LYON_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_LYON, EST_MADRID_1, 49, 575, 23, 120, MALO);
-    private static final AuxTestConexionNoUsar LYON_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_LYON, EST_MADRID_2, 50, 100, 4, 30, BUENO);
-    private static final AuxTestConexionNoUsar LYON_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_LYON, EST_PARIS_1, 51, 200, 8, 35, MALO);
-    private static final AuxTestConexionNoUsar LYON_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_LYON, EST_PARIS_2, 52, 475, 19, 165, BUENO);
-    private static final AuxTestConexionNoUsar LYON_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_LYON, EST_LISBOA, 53, 550, 22, 160, MALO);
-    private static final AuxTestConexionNoUsar LYON_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_LYON, EST_LONDRES, 54, 350, 14, 75, EXCELENTE);
-    private static final AuxTestConexionNoUsar LYON_TO_LYON = AuxTestConexionNoUsar.conexion(EST_LYON, EST_LYON, 55, 1075, 43, 150, BUENO);
-    private static final AuxTestConexionNoUsar LYON_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_LYON, EST_MONTREAL, 56, 800, 32, 125, BUENO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_MADRID_1 = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_MADRID_1, 57, 125, 5, 40, MALO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_MADRID_2 = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_MADRID_2, 58, 150, 6, 40, MALO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_PARIS_1 = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_PARIS_1, 59, 225, 9, 65, MALO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_PARIS_2 = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_PARIS_2, 60, 50, 2, 10, EXCELENTE);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_LISBOA = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_LISBOA, 61, 575, 23, 115, BUENO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_LONDRES = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_LONDRES, 62, 200, 8, 30, MALO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_LYON = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_LYON, 63, 175, 7, 50, BUENO);
-    private static final AuxTestConexionNoUsar MONTREAL_TO_MONTREAL = AuxTestConexionNoUsar.conexion(EST_MONTREAL, EST_MONTREAL, 64, 125, 5, 20, MALO);
-
-    private Sistema tengoUnSistemaValido() {
-        Sistema sis = new ImplementacionSistema();
-        sis.inicializarSistema(20);
-        return sis;
-    }
-
-    public static void main(String[] args) {
-        String[] estaciones = new String[]{"MADRID_1", "MADRID_2", "PARIS_1", "PARIS_2", "LISBOA", "LONDRES", "LYON", "MONTREAL"};
-
-        int id = 1;
-        final double F_TIEMPO = 1 / 5.;
-        Random r = new Random();
-        for (int i = 0; i < estaciones.length; i++) {
-            for (int j = 0; j < estaciones.length; j++) {
-                int distancia = r.nextInt(40) * 5;
-
-                int tiempo = (int) ((0.5 + r.nextDouble()) * F_TIEMPO * distancia);
-                int costo = (int) tiempo * 25;
-
-                System.out.printf("private static final AuxTestConexionNoUsar %s_TO_%s=AuxTestConexionNoUsar.conexion(EST_%s,EST_%s,%d,%d,%d,%d,%s);\n",
-                        estaciones[i], estaciones[j], estaciones[i], estaciones[j], id++, costo, tiempo, distancia,
-                        EstadoCamino.values()[r.nextInt(3)]);
-            }
-        }
-    }
-
-
-    @Test
-    public void testCaminosMinimosCosto1() {
-
-        Sistema sistema = tengoUnSistemaValido();
-        //Para ver el grafo esperado pueden entrar a
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2275EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22375EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_1%5Blabel%3D%2250EUR%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%2225EUR%20%7BMALO%7D%20%22%5D%3B%0AV_3-%3EV_2%5Blabel%3D%22625EUR%20%7BEXCELENTE%7D%20%22%5D%3B%0A%7D%0A
-        //layout recomendado circo
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1);
-        registrarConexionesOk(sistema,
-                MADRID_1_TO_MADRID_2,
-                MADRID_1_TO_MADRID_1,
-                MADRID_1_TO_LONDRES,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_MADRID_2
-        );
-
-        verificarCaminoCostoMinimoOk(sistema, EST_MADRID_1, EST_PARIS_1,
-                MADRID_1_TO_LONDRES, LONDRES_TO_PARIS_1);
-        //El camino madrid 1 a madrid 2 esta en estado malo
-        verificarCaminoCostoMinimoOk(sistema, EST_MADRID_1, EST_MADRID_2,
-                MADRID_1_TO_LONDRES, LONDRES_TO_PARIS_1, PARIS_1_TO_MADRID_2);
-        //Lo actualizamos y en teoria el grafo queda así por lo que podemos irnos derecho.
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2275EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22375EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_1%5Blabel%3D%2250EUR%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%2225EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_2%5Blabel%3D%22625EUR%20%7BEXCELENTE%7D%20%22%5D%3B%0A%7D%0A
-        checkearOk(sistema.actualizarCamino(MADRID_1, MADRID_2, MADRID_1_TO_MADRID_2.getId(), 25, 100, 100, BUENO), "El camino se deberia actualizar bien");
-        verificarCaminoCostoMinimoOk(sistema, EST_MADRID_1, EST_MADRID_2,
-                MADRID_1_TO_MADRID_2);
-        //tocamos el costo de la ruta mad1 to mad2 para forzar a ir por la ruta larga
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2275EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22375EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_1%5Blabel%3D%2250EUR%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%221076EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_2%5Blabel%3D%22625EUR%20%7BEXCELENTE%7D%20%22%5D%3B%0A%7D%0A
-        checkearOk(sistema.actualizarCamino(MADRID_1, MADRID_2, MADRID_1_TO_MADRID_2.getId(), 1076, 100, 100, BUENO), "El camino se deberia actualizar bien");
-
-        verificarCaminoCostoMinimoOk(sistema, EST_MADRID_1, EST_MADRID_2,
-                MADRID_1_TO_LONDRES, LONDRES_TO_PARIS_1, PARIS_1_TO_MADRID_2);
-
-    }
-
-    @Test
-    public void testCaminosMinimosCosto2() {
-
-        Sistema sistema = tengoUnSistemaValido();
-        //Para ver el grafo inicial pueden entrar a
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV%5F0%5Blabel%3D%22LON001%22%5D%3B%0AV%5F1%5Blabel%3D%22MAD001%22%5D%3B%0AV%5F2%5Blabel%3D%22MAD002%22%5D%3B%0AV%5F3%5Blabel%3D%22PAR001%22%5D%3B%0AV%5F4%5Blabel%3D%22PAR002%22%5D%3B%0AV%5F5%5Blabel%3D%22LIS001%22%5D%3B%0AV%5F6%5Blabel%3D%22LYO001%22%5D%3B%0AV%5F7%5Blabel%3D%22MON001%22%5D%3B%0AV%5F0%2D%3EV%5F3%5Blabel%3D%2275EUR%20%7BBUENO%7D%20%22%5D%3B%0AV%5F0%2D%3EV%5F5%5Blabel%3D%22200EUR%20%7BBUENO%7D%20%22%5D%3B%0AV%5F1%2D%3EV%5F0%5Blabel%3D%22375EUR%20%7BBUENO%7D%20%22%5D%3B%0AV%5F1%2D%3EV%5F2%5Blabel%3D%2225EUR%20%7BMALO%7D%20%22%5D%3B%0AV%5F2%2D%3EV%5F3%5Blabel%3D%22350EUR%20%7BBUENO%7D%20%22%5D%3B%0AV%5F3%2D%3EV%5F4%5Blabel%3D%22525EUR%20%7BBUENO%7D%20%22%5D%3B%0AV%5F3%2D%3EV%5F6%5Blabel%3D%2250EUR%20%7BBUENO%7D%20%22%5D%3B%0AV%5F4%2D%3EV%5F7%5Blabel%3D%2275EUR%20%7BEXCELENTE%7D%20%22%5D%3B%0AV%5F5%2D%3EV%5F1%5Blabel%3D%22425EUR%20%7BBUENO%7D%20%22%5D%3B%0AV%5F6%2D%3EV%5F7%5Blabel%3D%22800EUR%20%7BBUENO%7D%20%22%5D%3B%0A%7D%0A
-
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1, EST_PARIS_2, EST_LISBOA,
-                EST_LYON, EST_MONTREAL);
-        registrarConexionesOk(sistema,
-                MADRID_1_TO_LONDRES,
-                MADRID_1_TO_MADRID_2,
-                MADRID_2_TO_PARIS_1,
-                LONDRES_TO_LISBOA,
-                LISBOA_TO_MADRID_1,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_PARIS_2,
-                PARIS_1_TO_LYON,
-                LYON_TO_MONTREAL,
-                PARIS_2_TO_MONTREAL
-        );
-
-
-        verificarCaminoCostoMinimoOk(sistema, EST_LISBOA, EST_MONTREAL,
-                LISBOA_TO_MADRID_1,
-                MADRID_1_TO_LONDRES,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_PARIS_2,
-                PARIS_2_TO_MONTREAL);
-        //Actualizamos madrid1 to madrid 2 cambiando el camino minimo
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_4%5Blabel%3D%22PAR002%22%5D%3B%0AV_5%5Blabel%3D%22LIS001%22%5D%3B%0AV_6%5Blabel%3D%22LYO001%22%5D%3B%0AV_7%5Blabel%3D%22MON001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2275EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_0-%3EV_5%5Blabel%3D%22200EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22375EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%2225EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_2-%3EV_3%5Blabel%3D%22350EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_4%5Blabel%3D%22525EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_6%5Blabel%3D%2250EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_4-%3EV_7%5Blabel%3D%2275EUR%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_5-%3EV_1%5Blabel%3D%22425EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_6-%3EV_7%5Blabel%3D%22800EUR%20%7BBUENO%7D%20%22%5D%3B%0A%7D%0A
-        checkearOk(sistema.actualizarCamino(MADRID_1, MADRID_2, MADRID_1_TO_MADRID_2.getId(), 25, 100, 100, BUENO), "El camino se deberia actualizar bien");
-
-        verificarCaminoCostoMinimoOk(sistema, EST_LISBOA, EST_MONTREAL,
-                LISBOA_TO_MADRID_1,
-                MADRID_1_TO_MADRID_2,
-                MADRID_2_TO_PARIS_1,
-                PARIS_1_TO_PARIS_2,
-                PARIS_2_TO_MONTREAL);
-        //registramos otra conexion mas barata entre madrid 1 y londres
-        registrarConexionesOk(sistema, AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LONDRES, 23232, 10, 20, 200, BUENO));
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_4%5Blabel%3D%22PAR002%22%5D%3B%0AV_5%5Blabel%3D%22LIS001%22%5D%3B%0AV_6%5Blabel%3D%22LYO001%22%5D%3B%0AV_7%5Blabel%3D%22MON001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2275EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_0-%3EV_5%5Blabel%3D%22200EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22375EUR%20%7BBUENO%7D%20%2C10EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%2225EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_2-%3EV_3%5Blabel%3D%22350EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_4%5Blabel%3D%22525EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_6%5Blabel%3D%2250EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_4-%3EV_7%5Blabel%3D%2275EUR%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_5-%3EV_1%5Blabel%3D%22425EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_6-%3EV_7%5Blabel%3D%22800EUR%20%7BBUENO%7D%20%22%5D%3B%0A%7D%0A
-        verificarCaminoCostoMinimoOk(sistema, EST_LISBOA, EST_MONTREAL,
-                LISBOA_TO_MADRID_1,
-                AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LONDRES, 23232, 10, 20, 200, BUENO),
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_PARIS_2,
-                PARIS_2_TO_MONTREAL);
-
-        verificarCaminoCostoMinimoOk(sistema, EST_LISBOA, EST_LYON,
-                LISBOA_TO_MADRID_1,
-                AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LONDRES, 23232, 10, 20, 200, BUENO),
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_LYON);
-        registroEstacionOk(sistema, estacion("ROM002", "Roma"));
-        registroEstacionOk(sistema, estacion("ITA002", "Florencia"));
-        registroEstacionOk(sistema, estacion("RUS002", "Moscu"));
-        registrarConexionesOk(
-                sistema,
-                AuxTestConexionNoUsar.conexion("ROM002", "ITA002", 1, 2322, 22, 22, BUENO),
-                AuxTestConexionNoUsar.conexion("ROM002", "RUS002", 1, 2322, 22, 22, BUENO)
-        );
-        //No importa que agregemos una componente no conexa los caminos se deben mantener
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_4%5Blabel%3D%22PAR002%22%5D%3B%0AV_5%5Blabel%3D%22LIS001%22%5D%3B%0AV_6%5Blabel%3D%22LYO001%22%5D%3B%0AV_7%5Blabel%3D%22MON001%22%5D%3B%0AV_8%5Blabel%3D%22ROM002%22%5D%3B%0AV_9%5Blabel%3D%22ITA002%22%5D%3B%0AV_10%5Blabel%3D%22RUS002%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2275EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_0-%3EV_5%5Blabel%3D%22200EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22375EUR%20%7BBUENO%7D%20%2C10EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%2225EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_2-%3EV_3%5Blabel%3D%22350EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_4%5Blabel%3D%22525EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_6%5Blabel%3D%2250EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_4-%3EV_7%5Blabel%3D%2275EUR%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_5-%3EV_1%5Blabel%3D%22425EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_6-%3EV_7%5Blabel%3D%22800EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_8-%3EV_9%5Blabel%3D%222322EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_8-%3EV_10%5Blabel%3D%222322EUR%20%7BBUENO%7D%20%22%5D%3B%0A%7D%0A
-
-        verificarCaminoCostoMinimoOk(sistema, EST_LISBOA, EST_MONTREAL,
-                LISBOA_TO_MADRID_1,
-                AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LONDRES, 23232, 10, 20, 200, BUENO),
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_PARIS_2,
-                PARIS_2_TO_MONTREAL);
-
-        verificarCaminoCostoMinimoOk(sistema, EST_LISBOA, EST_LYON,
-                LISBOA_TO_MADRID_1,
-                AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LONDRES, 23232, 10, 20, 200, BUENO),
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_LYON);
-
-        //Tampoco que agregemos un camino mas barato si este no tiene un buen estado
-        registrarConexionesOk(sistema, LONDRES_TO_PARIS_1.withId(2323).withEstado(MALO).withCosto(1));
-        verificarCaminoCostoMinimoOk(sistema, EST_LISBOA, EST_LYON,
-                LISBOA_TO_MADRID_1,
-                AuxTestConexionNoUsar.conexion(EST_MADRID_1, EST_LONDRES, 23232, 10, 20, 200, BUENO),
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_LYON);
-    }
-
-    @Test
-    public void testCaminosMinimosCostoNoHayCamino() {
-
-        Sistema sistema = tengoUnSistemaValido();
-
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1, EST_PARIS_2, EST_LISBOA,
-                EST_LYON, EST_MONTREAL);
-        registrarConexionesOk(sistema,
-                MADRID_1_TO_LONDRES,
-                MADRID_2_TO_PARIS_1,
-                LONDRES_TO_LISBOA,
-                LISBOA_TO_MADRID_1,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_PARIS_2,
-                PARIS_1_TO_LYON,
-                LYON_TO_MONTREAL,
-                PARIS_2_TO_MONTREAL
-        );
-        //El grafo es :
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_4%5Blabel%3D%22PAR002%22%5D%3B%0AV_5%5Blabel%3D%22LIS001%22%5D%3B%0AV_6%5Blabel%3D%22LYO001%22%5D%3B%0AV_7%5Blabel%3D%22MON001%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2275EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_0-%3EV_5%5Blabel%3D%22200EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22375EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_2-%3EV_3%5Blabel%3D%22350EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_4%5Blabel%3D%22525EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_6%5Blabel%3D%2250EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_4-%3EV_7%5Blabel%3D%2275EUR%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_5-%3EV_1%5Blabel%3D%22425EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_6-%3EV_7%5Blabel%3D%22800EUR%20%7BBUENO%7D%20%22%5D%3B%0A%7D%0A
-        checkearError(ERROR_3, sistema.viajeCostoMinimoEuros(LISBOA, MADRID_2), "No hay camino");
-        //Agregamos la conexion en estado malo
-        registrarConexionesOk(sistema,
-                MADRID_1_TO_MADRID_2);
-        checkearError(ERROR_3, sistema.viajeCostoMinimoEuros(LISBOA, MADRID_2), "No hay camino");
-        registroEstacionOk(sistema, estacion("ROM022", "Roma"));
-
-        checkearError(ERROR_3, sistema.viajeCostoMinimoEuros(LISBOA, "ROM022"), "No hay camino");
-
-        //Agregamos una conexion lyon madrid 2
-        //https://dreampuf.github.io/GraphvizOnline/#digraph%20G%7B%0AV_0%5Blabel%3D%22LON001%22%5D%3B%0AV_1%5Blabel%3D%22MAD001%22%5D%3B%0AV_2%5Blabel%3D%22MAD002%22%5D%3B%0AV_3%5Blabel%3D%22PAR001%22%5D%3B%0AV_4%5Blabel%3D%22PAR002%22%5D%3B%0AV_5%5Blabel%3D%22LIS001%22%5D%3B%0AV_6%5Blabel%3D%22LYO001%22%5D%3B%0AV_7%5Blabel%3D%22MON001%22%5D%3B%0AV_8%5Blabel%3D%22ROM022%22%5D%3B%0AV_0-%3EV_3%5Blabel%3D%2275EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_0-%3EV_5%5Blabel%3D%22200EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_0%5Blabel%3D%22375EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_1-%3EV_2%5Blabel%3D%2225EUR%20%7BMALO%7D%20%22%5D%3B%0AV_2-%3EV_3%5Blabel%3D%22350EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_4%5Blabel%3D%22525EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_3-%3EV_6%5Blabel%3D%2250EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_4-%3EV_7%5Blabel%3D%2275EUR%20%7BEXCELENTE%7D%20%22%5D%3B%0AV_5-%3EV_1%5Blabel%3D%22425EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_6-%3EV_2%5Blabel%3D%22100EUR%20%7BBUENO%7D%20%22%5D%3B%0AV_6-%3EV_7%5Blabel%3D%22800EUR%20%7BBUENO%7D%20%22%5D%3B%0A%7D%0A
-        registrarConexionesOk(sistema, LYON_TO_MADRID_2);
-        verificarCaminoCostoMinimoOk(sistema, EST_LISBOA, EST_MADRID_2,
-                LISBOA_TO_MADRID_1,
-                MADRID_1_TO_LONDRES,
-                LONDRES_TO_PARIS_1,
-                PARIS_1_TO_LYON,
-                LYON_TO_MADRID_2);
-    }
-
-    @Test
-    public void testCaminosEurosMinimosEstacionesInvalidas() {
-        Sistema sistema = tengoUnSistemaValido();
-
-        checkearError(ERROR_1, sistema.viajeCostoMinimoEuros("", "ROM022"), "vacios/nulos");
-        checkearError(ERROR_1, sistema.viajeCostoMinimoEuros(null, "ROM022"), "vacios/nulos");
-        checkearError(ERROR_1, sistema.viajeCostoMinimoEuros("ROM022", null), "vacios/nulos");
-        checkearError(ERROR_1, sistema.viajeCostoMinimoEuros("ROM022", ""), "vacios/nulos");
-
-        checkearError(ERROR_2, sistema.viajeCostoMinimoEuros("AS@33", "ROM022"), "invalidos");
-        checkearError(ERROR_2, sistema.viajeCostoMinimoEuros("ROM232", "ROM02222"), "invalidos");
-    }
-
-    @Test
-    public void testCaminosEurosMinimosEstacionesNoExistentes() {
-
-        Sistema sistema = tengoUnSistemaValido();
-
-        registroEstacionOk(sistema, EST_LONDRES, EST_MADRID_1, EST_MADRID_2, EST_PARIS_1, EST_PARIS_2, EST_LISBOA,
-                EST_LYON, EST_MONTREAL);
-        checkearError(ERROR_5, sistema.viajeCostoMinimoEuros(EST_LONDRES.getCodigo(), "ROM022"), "invalidos");
-        checkearError(ERROR_4, sistema.viajeCostoMinimoEuros("ROM022", EST_LONDRES.getCodigo()), "invalidos");
-    }
-
-    private void verificarCaminoCostoMinimoOk(Sistema sistema, AuxTestClaseEstacionNoUsar estacionOrigen, AuxTestClaseEstacionNoUsar estacionDestino,
-                                              AuxTestConexionNoUsar... conexionesQueSeUsan) {
-        Retorno ret = checkearOk(sistema.viajeCostoMinimoEuros(estacionOrigen.getCodigo(), estacionDestino.getCodigo()), "El costo minimo no debe dar error");
-
-        double costoTotal = 0;
-        for (AuxTestConexionNoUsar conn : conexionesQueSeUsan) {
-            costoTotal += conn.getCosto();
-        }
-        Assertions.assertEquals((int) costoTotal, ret.getValorInteger());
-        String retornoEsperado = Stream.concat(Stream.of(estacionOrigen), Arrays.stream(conexionesQueSeUsan).map(AuxTestConexionNoUsar::getDestino))
-                .map(Objects::toString)
-                .collect(Collectors.joining("|"));
-        Assertions.assertEquals(retornoEsperado, ret.getValorString());
-    }
-}
Index: obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxAccionesPasajeros.java
===================================================================
diff --git a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxAccionesPasajeros.java b/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxAccionesPasajeros.java
deleted file mode 100644
--- a/obligatorio-ae2-mar23-tests-v2/src/test/java/sistema/AuxAccionesPasajeros.java	
+++ /dev/null	
@@ -1,34 +0,0 @@
-package sistema;
-
-import interfaz.Nacionalidad;
-import interfaz.Retorno;
-import interfaz.Sistema;
-
-import static sistema.AuxAsserciones.checkearOk;
-
-public final class AuxAccionesPasajeros {
-    public static Retorno seAgregoCorrectamenteUnPasajeroValido(Sistema sistema, Nacionalidad nacionalidad, int numeroId, String nombre, int edad) {
-        AuxTestPasajeroNoUsar pasajeroNoUsar = new AuxTestPasajeroNoUsar(nacionalidad, numeroId, nombre, edad);
-        return checkearOk(sistema.registrarPasajero(pasajeroNoUsar.getIdentificador(), pasajeroNoUsar.getNombre(), pasajeroNoUsar.getEdad()), String.format("El pasajero '%s' no se registro correctamente.", pasajeroNoUsar));
-    }
-
-    public static Retorno agregoUnPasajero(Sistema sistema, Nacionalidad nacionalidad, int numeroId, String nombre, int edad) {
-        AuxTestPasajeroNoUsar pasajeroNoUsar = new AuxTestPasajeroNoUsar(nacionalidad, numeroId, nombre, edad);
-        return sistema.registrarPasajero(pasajeroNoUsar.getIdentificador(), pasajeroNoUsar.getNombre(), pasajeroNoUsar.getEdad());
-    }
-
-    public static Retorno agregoUnPasajeroValidoConElMismoId(Sistema sistema, String identificador, String nombre, int edad) {
-
-        return sistema.registrarPasajero(identificador, nombre, edad);
-    }
-
-    public static void agregoPasajerosOk(Sistema sistema, AuxTestPasajeroNoUsar... pasajeros) {
-        for (AuxTestPasajeroNoUsar pasajero : pasajeros) {
-
-            checkearOk(sistema.registrarPasajero(pasajero.getIdentificador(), pasajero.getNombre(), pasajero.getEdad()),
-                    String.format("Esperaba que el pasajero '%s'[id='%s',edad='%d'] se agregara correctamente",
-                            pasajero.getNombre(), pasajero.getIdentificador(), pasajero.getEdad()));
-
-        }
-    }
-}
